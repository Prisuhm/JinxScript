util.require_natives("3095a", "g")
pluto_use "0.9.1"
native_invoker.accept_bools_as_ints(true)

local isDebugMode = false
local joaat, toast, yield, draw_debug_text, reverse_joaat = util.joaat, util.toast, util.yield, util.draw_debug_text, util.reverse_joaat

local supported_game_version <const> = "1.68-3179"
if (game_version := menu.get_version().game) != supported_game_version then
	util.toast($"This script was made for {supported_game_version}. The current game version is {game_version}.\nPlease note that some features or even the script may not work as intended.")
end

local CWeaponDamageEventTrigger = memory.rip(memory.scan("E8 ? ? ? ? 44 8B 65 80 41 FF C7") + 1)
local allowDuckingAddr = memory.read_long(memory.read_long(memory.rip(memory.scan("01 48 8B 05 ? ? ? ? 48 8B 48 18") + 4)) + 0x18) -- this too lol

local invisibility = menu.ref_by_path("Self>Appearance>Invisibility")
local levitation = menu.ref_by_path("Self>Movement>Levitation>Levitation")
local vehInvisibility = menu.ref_by_path("Vehicle>Invisibility")
local positonSpoofing = menu.ref_by_path("Online>Spoofing>Position Spoofing>Position Spoofing")
local spoofedPos = menu.ref_by_path("Online>Spoofing>Position Spoofing>Spoofed Position")
local superJump = menu.ref_by_path("Self>Movement>Super Jump")
local gracefulLanding = menu.ref_by_path("Self>Movement>Graceful Landing")

local GlobalplayerBD = 2657921
local GlobalplayerBD_FM = 1845263
local GlobalplayerBD_FM_3 = 1886967

enum Labels begin
	CMDOTH = -1974706693,
	BLIPNFND = -1331937481,
	DT_T = -766393174,
	PLYNVEH = 1067523721,
	STNDUSR = 1729001290,
	TOOFAST = 1669138996
end

enum DRIVINGMODE begin
	DF_StopForCars					= 1,
	DF_StopForPeds					= 2,
	DF_SwerveAroundAllCars			= 4,
	DF_SteerAroundStationaryCars	= 8,
	DF_SteerAroundPeds				= 16,
	DF_SteerAroundObjects			= 32,
	DF_DontSteerAroundPlayerPed		= 64,
	DF_StopAtLights					= 128,
	DF_GoOffRoadWhenAvoiding		= 256,
	DF_DriveIntoOncomingTraffic		= 512,
	DF_DriveInReverse				= 1024,
	DF_UseWanderFallbackInsteadOfStraightLine = 2048,
	DF_AvoidRestrictedAreas			= 4096,
	DF_PreventBackgroundPathfinding		= 8192,
	DF_AdjustCruiseSpeedBasedOnRoadSpeed = 16384,
	DF_UseShortCutLinks				=  262144,
	DF_ChangeLanesAroundObstructions = 524288,
	DF_UseSwitchedOffNodes			=  2097152,
	DF_PreferNavmeshRoute			=  4194304,
	DF_PlaneTaxiMode				=  8388608,
	DF_ForceStraightLine			= 16777216,
	DF_UseStringPullingAtJunctions	= 33554432,
	DF_AvoidHighways				= 536870912,
	DF_ForceJoinInRoadDirection		= 1073741824
end

enum ENTER_EXIT_VEHICLE_FLAGS begin
	ECF_RESUME_IF_INTERRUPTED = 1,
	ECF_WARP_ENTRY_POINT = 2,
	ECF_JACK_ANYONE = 8,
	ECF_WARP_PED = 16,
	ECF_DONT_WAIT_FOR_VEHICLE_TO_STOP = 64,
	ECF_DONT_CLOSE_DOOR = 256,
	ECF_WARP_IF_DOOR_IS_BLOCKED = 512,
	ECF_JUMP_OUT = 4096,
	ECF_DONT_DEFAULT_WARP_IF_DOOR_BLOCKED = 65536,
	ECF_USE_LEFT_ENTRY = 131072,
	ECF_USE_RIGHT_ENTRY = 262144,
	ECF_JUST_PULL_PED_OUT = 524288,
	ECF_BLOCK_SEAT_SHUFFLING = 1048576,
	ECF_WARP_IF_SHUFFLE_LINK_IS_BLOCKED = 4194304,
	ECF_DONT_JACK_ANYONE = 8388608,
	ECF_WAIT_FOR_ENTRY_POINT_TO_BE_CLEAR = 16777216
end

enum eDamageFlags begin
	DF_None								= 0,
	DF_IsAccurate						= 1,
	DF_MeleeDamage						= 2,
	DF_SelfDamage						= 4,
	DF_ForceMeleeDamage					= 8,
	DF_IgnorePedFlags					= 16,
	DF_ForceInstantKill					= 32,
	DF_IgnoreArmor						= 64,
	DF_IgnoreStatModifiers				= 128,
	DF_FatalMeleeDamage					= 256,
	DF_AllowHeadShot					= 512,
	DF_AllowDriverKill					= 1024,
	DF_KillPriorToClearedWantedLevel	= 2048,
	DF_SuppressImpactAudio				= 4096,
	DF_ExpectedPlayerKill				= 8192,
	DF_DontReportCrimes					= 16384,
	DF_PtFxOnly							= 32768,
	DF_UsePlayerPendingDamage			= 65536,
	DF_AllowCloneMeleeDamage			= 131072,
	DF_NoAnimatedMeleeReaction			= 262144,
	DF_IgnoreRemoteDistCheck			= 524288,
	DF_VehicleMeleeHit					= 1048576,
	DF_EnduranceDamageOnly				= 2097152,
	DF_HealthDamageOnly					= 4194304,
	DF_DamageFromBentBullet				= 8388608
end

enum VEHICLE_CLASS begin
	VC_COMPACT = 0,
	VC_SEDAN,
	VC_SUV,
	VC_COUPE,
	VC_MUSCLE,
	VC_SPORT_CLASSIC,
	VC_SPORT,
	VC_SUPER,
	VC_MOTORCYCLE,
	VC_OFF_ROAD,
	VC_INDUSTRIAL,
	VC_UTILITY,
	VC_VAN,
	VC_CYCLE,
	VC_BOAT,
	VC_HELICOPTER,
	VC_PLANE,
	VC_SERVICE,
	VC_EMERGENCY,
	VC_MILITARY,
	VC_COMMERCIAL,
	VC_RAIL,
	VC_OPEN_WHEEL
end

enum TransitionState begin
	TRANSITION_STATE_EMPTY = 0,
	TRANSITION_STATE_SP_SWOOP_UP = 1,
	TRANSITION_STATE_MP_SWOOP_UP = 2,
	TRANSITION_STATE_CREATOR_SWOOP_UP = 3,
	TRANSITION_STATE_PRE_HUD_CHECKS = 4,
	TRANSITION_STATE_WAIT_HUD_EXIT = 5,
	TRANSITION_STATE_WAIT_FOR_SUMMON = 6,
	TRANSITION_STATE_SP_SWOOP_DOWN = 7,
	TRANSITION_STATE_MP_SWOOP_DOWN = 8,
	TRANSITION_STATE_CANCEL_JOINING = 9,
	TRANSITION_STATE_RETRY_LOADING = 10,
	TRANSITION_STATE_RETRY_LOADING_SLOT_1 = 11,
	TRANSITION_STATE_RETRY_LOADING_SLOT_2 = 12,
	TRANSITION_STATE_RETRY_LOADING_SLOT_3 = 13,
	TRANSITION_STATE_RETRY_LOADING_SLOT_4 = 14,
	TRANSITION_STATE_WAIT_ON_INVITE = 15,
	TRANSITION_STATE_PREJOINING_FM_SESSION_CHECKS = 16,
	TRANSITION_STATE_LOOK_FOR_FRESH_JOIN_FM = 17,
	TRANSITION_STATE_LOOK_TO_JOIN_ANOTHER_SESSION_FM = 18,
	TRANSITION_STATE_CONFIRM_FM_SESSION_JOINING = 19,
	TRANSITION_STATE_WAIT_JOIN_FM_SESSION = 20,
	TRANSITION_STATE_CREATION_ENTER_SESSION = 21,
	TRANSITION_STATE_PRE_FM_LAUNCH_SCRIPT = 22,
	TRANSITION_STATE_FM_TEAMFULL_CHECK = 23,
	TRANSITION_STATE_START_FM_LAUNCH_SCRIPT = 24,
	TRANSITION_STATE_FM_TRANSITION_CREATE_PLAYER = 25,
	TRANSITION_STATE_IS_FM_AND_TRANSITION_READY = 26,
	TRANSITION_STATE_FM_SWOOP_DOWN = 27,
	TRANSITION_STATE_POST_BINK_VIDEO_WARP = 28,
	TRANSITION_STATE_FM_FINAL_SETUP_PLAYER = 29,
	TRANSITION_STATE_MOVE_FM_TO_RUNNING_STATE = 30,
	TRANSITION_STATE_FM_HOW_TO_TERMINATE = 31,
	TRANSITION_STATE_START_CREATOR_PRE_LAUNCH_SCRIPT_CHECK = 32,
	TRANSITION_STATE_START_CREATOR_LAUNCH_SCRIPT = 33,
	TRANSITION_STATE_CREATOR_TRANSITION_CREATE_PLAYER = 34,
	TRANSITION_STATE_IS_CREATOR_AND_TRANSITION_READY = 35,
	TRANSITION_STATE_CREATOR_SWOOP_DOWN = 36,
	TRANSITION_STATE_CREATOR_FINAL_SETUP_PLAYER = 37,
	TRANSITION_STATE_MOVE_CREATOR_TO_RUNNING_STATE = 38,
	TRANSITION_STATE_PREJOINING_TESTBED_SESSION_CHECKS = 39,
	TRANSITION_STATE_LOOK_FOR_FRESH_JOIN_TESTBED = 40,
	TRANSITION_STATE_LOOK_FOR_FRESH_HOST_TESTBED = 41,
	TRANSITION_STATE_LOOK_TO_JOIN_ANOTHER_SESSION_TESTBED = 42,
	TRANSITION_STATE_LOOK_TO_HOST_SESSION_TESTBED = 43,
	TRANSITION_STATE_CONFIRM_TESTBED_SESSION_JOINING = 44,
	TRANSITION_STATE_WAIT_JOIN_TESTBED_SESSION = 45,
	TRANSITION_STATE_START_TESTBED_LAUNCH_SCRIPT = 46,
	TRANSITION_STATE_TESTBED_TRANSITION_CREATE_PLAYER = 47,
	TRANSITION_STATE_IS_TESTBED_AND_TRANSITION_READY = 48,
	TRANSITION_STATE_TESTBED_SWOOP_DOWN = 49,
	TRANSITION_STATE_TESTBED_FINAL_SETUP_PLAYER = 50,
	TRANSITION_STATE_MOVE_TESTBED_TO_RUNNING_STATE = 51,
	TRANSITION_STATE_TESTBED_HOW_TO_TERMINATE = 52,
	TRANSITION_STATE_QUIT_CURRENT_SESSION_PROMPT = 53,
	TRANSITION_STATE_WAIT_FOR_TRANSITION_SESSION_TO_SETUP = 54,
	TRANSITION_STATE_TERMINATE_SP = 55,
	TRANSITION_STATE_WAIT_TERMINATE_SP = 56,
	TRANSITION_STATE_KICK_TERMINATE_SESSION = 57,
	TRANSITION_STATE_TERMINATE_SESSION = 58,
	TRANSITION_STATE_WAIT_TERMINATE_SESSION = 59,
	TRANSITION_STATE_TERMINATE_SESSION_AND_HOLD = 60,
	TRANSITION_STATE_TERMINATE_SESSION_AND_MOVE_INTO_HOLDING_STATE = 61,
	TRANSITION_STATE_TEAM_SWAPPING_CHECKS = 62,
	TRANSITION_STATE_RETURN_TO_SINGLEPLAYER = 63,
	TRANSITION_STATE_WAIT_FOR_SINGLEPLAYER_TO_START = 64,
	TRANSITION_STATE_WAITING_FOR_EXTERNAL_TERMINATION_CALL = 65,
	TRANSITION_STATE_TERMINATE_MAINTRANSITION = 66,
	TRANSITION_STATE_WAIT_FOR_DIRTY_LOAD_CONFIRM = 67,
	TRANSITION_STATE_DLC_INTRO_BINK = 68,
	TRANSITION_STATE_SPAWN_INTO_PERSONAL_VEHICLE = 69
end

enum DUCK_TOGGLE begin
    TOGGLE_DUCK_AUTO = -1,
    TOGGLE_DUCK_OFF,
    TOGGLE_DUCK_ON
end

local function isNetPlayerOk(playerID, assert_playing = false, assert_done_transition = true) -- credit to sapphire *sighs* yet again
	if not NETWORK_IS_PLAYER_ACTIVE(playerID) then return false end
	if assert_playing and not IS_PLAYER_PLAYING(playerID) then return false end
	if assert_done_transition then
		if playerID == memory.read_int(memory.script_global(2672741 + 3)) then
			return memory.read_int(memory.script_global(2672741 + 2)) != 0
		elseif memory.read_int(memory.script_global(GlobalplayerBD + 1 + (playerID * 463))) != 4 then -- Global_2657921[iVar0 /*463*/] != 4
			return false
		end
	end
	return true
end

local function bitTest(bits, place)
	return (bits & (1 << place)) != 0
end

local function setBit(addr: number, bit: number)
	memory.write_int(addr, memory.read_int(addr) | 1 << bit)
end

local function clearBit(addr: number, bit: number)
	memory.write_int(addr, memory.read_int(addr) ~ 1 << bit)
end

local function isPlayerSpectating(playerID)
	return bitTest(memory.read_int(memory.script_global(GlobalplayerBD + 1 + (playerID * 463) + 199)), 2) -- BitTest(Global_2657921[bParam0 /*463*/].f_199, 2)
end

local function getPlayerJobPoints(playerID)
	return memory.read_int(memory.script_global(GlobalplayerBD_FM + 1 + (playerID * 877) + 9))  -- Global_1845263[PLAYER::PLAYER_ID() /*877*/].f_9
end

local function isPlayerUsingOrbitalCannon(playerID)
	return bitTest(memory.read_int(memory.script_global(GlobalplayerBD + 1 + (playerID * 463) + 424)), 0) -- Global_2657921[PLAYER::PLAYER_ID() /*463*/].f_424
end

local function isPlayerRidingRollerCoaster(playerID)
	return bitTest(memory.read_int(memory.script_global(GlobalplayerBD_FM + 1 + (playerID * 877) + 873)), 15) -- Global_1845263[PLAYER::PLAYER_ID() /*877*/].f_873
end

local function isPlayerSolicitingProstitute(playerID)
	return memory.read_int(memory.script_global(GlobalplayerBD + 1 + (playerID * 463) + 428)) != 0 -- Global_2657921[PLAYER::PLAYER_ID() /*463*/].f_428
end

local function isPlayerUsingBallisticEquipment(playerID)
	return memory.script_global(GlobalplayerBD_FM_3 + 1 + (playerID * 609) + 586) -- Global_1886967[PLAYER::PLAYER_ID() /*609*/].f_586
end

local function getPlayerCurrentInterior(playerID)
	if not isNetPlayerOk(playerID) then return end -- to prevent random access violations
	return memory.read_int(memory.script_global(GlobalplayerBD + 1 + (playerID * 463) + 245)) -- Global_2657921[bVar0 /*463*/].f_245
end

local function getPlayerCurrentShop(playerID)
	if not isNetPlayerOk(playerID) then return end
	return memory.read_int(memory.script_global(GlobalplayerBD + 1 + (playerID * 463) + 246)) -- Global_2657921[bVar0 /*463*/].f_246
end

local function getPlayerProperty(playerID)
	return memory.script_global(GlobalplayerBD_FM + 1 + (playerID * 877) + 267 + 34)  -- Global_1845263[PLAYER::PLAYER_ID() /*877*/].f_267.f_34)
end

local function blipInteriorID(playerID)
	return memory.script_global(GlobalplayerBD + 1 + (playerID * 463) + 73 + 6) -- Global_2657921[bParam0 /*463*/].f_73.f_6
end

local function blipInteriorPos(playerID)
	return memory.script_global(GlobalplayerBD + 1 + (playerID * 463) + 73 + 7) -- Global_2657921[bParam0 /*463*/].f_73.f_7
end

local function isFreemodeActive(playerID)
	return NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT(playerID, "freemode", -1)
end

local function getTransitionState()
	return memory.read_int(memory.script_global(1575008))  
end

local getTransitionStateName
do
	local names <const> = TransitionState:vkmap()
	function getTransitionStateName(transitionState) -- credit to sapphire for this function
		return names[transitionState]:sub(18)
	end
end

local function isPlayerInInterior(playerID)
	if not isNetPlayerOk(playerID) then return end
    return GET_INTERIOR_GROUP_ID(getPlayerCurrentInterior(playerID)) == 0 and getPlayerCurrentInterior(playerID) != 0 or players.is_in_interior(playerID)
end

local function isPlayerInCutscene(playerID)
	return NETWORK_IS_PLAYER_IN_MP_CUTSCENE(playerID) or IS_PLAYER_IN_CUTSCENE(playerID)
end

local function isPlayerGodmode(playerID)
	local pos = players.get_position(playerID)
	local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
	if isNetPlayerOk(playerID) and (players.is_godmode(playerID) or entities.is_invulnerable(ped)) and not isPlayerInInterior(playerID) and not isPlayerInCutscene(playerID) 
	and isFreemodeActive(playerID) and not players.is_using_rc_vehicle(playerID) and not isPlayerRidingRollerCoaster(playerID) and pos.z > 0.0 then
		return true
	end
	return false
end

local function getSeatPedIsIn(ped)
	local vehicle = GET_VEHICLE_PED_IS_USING(ped)
	if vehicle == 0 then
		return nil
	end
	local num_of_seats = GET_VEHICLE_MODEL_NUMBER_OF_SEATS(GET_ENTITY_MODEL(vehicle))
	for i = -1, num_of_seats - 1 do
		local ped_in_seat = GET_PED_IN_VEHICLE_SEAT(vehicle, i)
		if ped_in_seat == ped then
			return i
		end
	end
end

local function isPlayerInAnyVehicle(playerID)
	local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
	return IS_PED_IN_ANY_VEHICLE(ped) and not IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(playerID)
end

local function isDetectionPresent(playerID, detection)
	if players.exists(playerID) and menu.player_root(playerID):isValid() then
		for menu.player_root(playerID):getChildren() as cmd do
			if cmd:getType() == COMMAND_LIST_CUSTOM_SPECIAL_MEANING and cmd:refByRelPath(detection):isValid() and players.exists(playerID) then
				return true
			end
		end
	end
	return false
end

local function loadPtfxAsset(assetName)
	while not HAS_NAMED_PTFX_ASSET_LOADED(assetName) do
		REQUEST_NAMED_PTFX_ASSET(assetName)
		yield()
	end
end

local function requestAnimDict(animDict)
	while not HAS_ANIM_DICT_LOADED(animDict) do
		REQUEST_ANIM_DICT(animDict)
		yield()
	end
end

local function requestClipset(clipset)
	while not HAS_CLIP_SET_LOADED(clipset) do
		REQUEST_CLIP_SET(clipset)
		yield()
	end
end

local function getTeamID(playerID)
	if not isNetPlayerOk(playerID) then return end
	local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
	local pPed = entities.handle_to_pointer(ped)
	local net_obj = memory.read_long(pPed + 0xD0)
	if net_obj == 0 then return end
	local teamID = memory.read_byte(net_obj + 0x469)
	if net_obj != 0 and teamID != 6 then
		return teamID
	end
end

local function getInstanceID(playerID)
	if not isNetPlayerOk(playerID) then return end 
	local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
	local pPed = entities.handle_to_pointer(ped)
	local net_obj = memory.read_long(pPed + 0xD0)
	if net_obj == 0 then return end
	local instanceID = memory.read_byte(net_obj + 0x46A)
	if net_obj != 0 and instanceID != 64 then
		return instanceID
	end
end

local randomPeds = {
	joaat("a_f_y_topless_01"),
	joaat("s_m_m_movalien_01"),
	joaat("s_m_y_mime"), 
	joaat("u_m_y_militarybum"),
	joaat("a_m_y_indian_01"),
	joaat("s_m_y_clown_01"),
	joaat("u_m_y_burgerdrug_01"),
	joaat("u_m_m_yulemonster")
}

local function createRandomPed(pos)
	local mdlHash = randomPeds[math.random(#randomPeds)]
	util.request_model(mdlHash)
	return entities.create_ped(26, mdlHash, pos, 0)
end


local function godKill(playerID)
	local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
	local ping = ROUND(NETWORK_GET_AVERAGE_PING(playerID))
	local timer = (ping > 300) ? (util.current_time_millis() + 5000) : (util.current_time_millis() + 3000)
	local pPed =  entities.handle_to_pointer(ped)
	local pedPtr = entities.handle_to_pointer(players.user_ped())
	yield()
	yield()
	repeat
		util.trigger_script_event(1 << playerID, {800157557, players.user(), 225624744, math.random(0, 9999)})
		util.call_foreign_function(CWeaponDamageEventTrigger, pedPtr, pPed, pPed + 0x90, 0, 1, joaat("weapon_pistol"), 500.0, 0, 0, DF_IsAccurate | DF_IgnorePedFlags | DF_SuppressImpactAudio | DF_IgnoreRemoteDistCheck, 0, 0, 0, 0, 0, 0, 0, 0.0)
		if util.current_time_millis() > timer then
			toast($"{players.get_name(playerID)}'s godmode can not be removed. :/")
			timer = util.current_time_millis() + 3000
			return
		end
		yield()
	until IS_PED_DEAD_OR_DYING(ped)
	yield()
	yield()
	timer = util.current_time_millis() + 3000
end

local function triggerDistanceBasedTeleport(playerID, scriptEvent)
	local joinOrg = menu.ref_by_rel_path(menu.player_root(playerID), "Join CEO/MC")
	local timer = util.current_time_millis() + 1000
	joinOrg.value = true
	repeat
		if util.current_time_millis() > timer then
			joinOrg.value = false
			return
		end
		yield()
	until players.get_boss(players.user()) != -1
	timer = util.current_time_millis() + 1000
	local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
	local pos = players.get_position(players.user())
	local pPos = players.get_position(playerID)
	pPos.z -= 10
	invisibility:setState("Locally Visible")
	SET_ENTITY_COORDS_NO_OFFSET(players.user_ped(), pPos, false, false, false)
	repeat
		if util.current_time_millis() > timer then
			joinOrg.value = false
			invisibility:setState("Disabled")
			SET_ENTITY_COORDS_NO_OFFSET(players.user_ped(), pos, false, false, false)
			return
		end
		yield()
	until DOES_ENTITY_EXIST(ped)
	yield(500)
	util.trigger_script_event( 1 << playerID, scriptEvent)
	SET_ENTITY_COORDS_NO_OFFSET(players.user_ped(), pos, false, false, false)
	invisibility:setState("Disabled")
	joinOrg.value = false
end

local function doesVehicleHaveImaniTech(vehicle_model)
	switch vehicle_model do
	case joaat("deity"):
	case joaat("granger2"):
	case joaat("buffalo4"):
	case joaat("jubilee"):
	case joaat("patriot3"):
	case joaat("champion"):
	case joaat("greenwood"):
	case joaat("omnisegt"):
	case joaat("virtue"):
	case joaat("r300"):
	case joaat("stingertt"):
	case joaat("buffalo5"):
	case joaat("coureur"):
	case joaat("monstrociti"):
	case joaat("ruiner2"):
		return true
	end
	return false
end

local weapon_stuff = {
	{"Firework", "weapon_firework"}, 
	{"Up N Atomizer", "weapon_raypistol"},
	{"Unholy Hellbringer", "weapon_raycarbine"},
	{"Rail Gun", "weapon_railgun"},
	{"Red Laser", "vehicle_weapon_enemy_laser"},
	{"Green Laser", "vehicle_weapon_player_laser"},
	{"P-996 Lazer", "vehicle_weapon_player_lazer"},
	{"RPG", "weapon_rpg"},
	{"Homing Launcher", "weapon_hominglauncher"},
	{"EMP Launcher", "weapon_emplauncher"},
	{"Flare Gun", "weapon_flaregun"},
	{"Shotgun", "weapon_bullpupshotgun"},
	{"Stungun", "weapon_stungun"},
	{"Smoke Gun", "weapon_smokegrenade"},
}

local proofs = {
	bullet = {name="Bullets",on=false},
	fire = {name="Fire",on=false},
	explosion = {name="Explosions",on=false},
	collision = {name="Collision",on=false},
	melee = {name="Melee",on=false},
	steam = {name="Steam",on=false},
	water = {name="Water",on=false},
}

local doors = {
	"v_ilev_ml_door1",
	"v_ilev_ta_door",
	"v_ilev_247door",
	"v_ilev_247door_r",
	"v_ilev_lostdoor",
	"v_ilev_bs_door",
	"v_ilev_cs_door01",
	"v_ilev_cs_door01_r",
	"v_ilev_gc_door03",
	"v_ilev_gc_door04",
	"v_ilev_clothmiddoor",
	"v_ilev_clothmiddoor",
	"prop_shop_front_door_l",
	"prop_shop_front_door_r",
	"prop_com_ls_door_01",
	"v_ilev_carmod3door",
}

local object_stuff = {
	{util.joaat("prop_ld_ferris_wheel"), "Ferris Wheel"},
	{util.joaat("p_spinning_anus_s"), "UFO"},
	{util.joaat("prop_windmill_01"), "Windmill"},
	{util.joaat("prop_staticmixer_01"), "Cement Mixer"},
	{util.joaat("prop_towercrane_02a"), "Tower Crane"},
	{util.joaat("des_scaffolding_root"), "Scaffolding"},
	{util.joaat("stt_prop_stunt_bowling_ball"), "Big Bowling Ball"},
	{util.joaat("stt_prop_stunt_soccer_ball"), "Big Soccer Ball"},
	{util.joaat("prop_juicestand"), "Big Orange Ball"},
	{util.joaat("stt_prop_stunt_jump_l"), "Stunt Ramp"},
}

local deezBalls = {
	{util.joaat("stt_prop_stunt_soccer_sball"), "Small Soccer Ball"},
	{util.joaat("stt_prop_stunt_soccer_ball"), " Medium Soccer Ball"},
	{util.joaat("stt_prop_stunt_soccer_lball"), "Large Soccer Ball"},
	{util.joaat("v_res_mexball"), "Yoga Ball"},
	{util.joaat("stt_prop_stunt_bowling_ball"), "Bowling Ball"},
	{util.joaat("imp_prop_bomb_ball"), "Bomb Ball"},
	{util.joaat("prop_bskball_01"), "Basketball"},
}

local vehicle_classes = {
	"Compacts",
	"Sedans",
	"SUVs",
	"Coupes",
	"Muscle",
	"Sports Classics",
	"Sports",
	"Super",
	"Motorcycles",
	"Off-road",
	"Industrial",
	"Utility",
	"Vans",
	"Cycles",
	"Boats",
	"Helicopters",
	"Planes",
	"Service",
	"Emergency",
	"Military",
	"Commercial",
	"Trains",
	"Openwheel"
}

local locations = {
	{"Safe Space [AFK Room]", {x=-158.71494, y=-982.75885, z=149.13135}},
	{"Torture Room", {x=147.170, y=-2201.804, z=4.688}},
	{"Mining Tunnels", {x=-595.48505, y=2086.4502, z=131.38136}},
	{"Omegas Garage", {x=2330.2573, y=2572.3005, z=46.679367}},
	{"Eclipse Blvd Garage", {x=520.0, y=-2625.0, z=-50.0}},
	{"Server Farm", {x=2474.0847, y=-332.58887, z=92.9927}},
	{"Character Creation", {x=402.91586, y=-998.5701, z=-99.004074}},
	{"Life Invader Building", {x=-1082.8595, y=-254.774, z=37.763317}},
	{"Mission End Garage", {x=405.9228, y=-954.1149, z=-99.6627}},
	{"Destroyed Hospital", {x=304.03894, y=-590.3037, z=43.291893}},
	{"Stadium", {x=-256.92334, y=-2024.9717, z=30.145584}},
	{"Comedy Club", {x=-430.00974, y=261.3437, z=83.00648}},
	{"Record A Studios", {x=-1010.6883, y=-49.127754, z=-99.40313}},
	{"Bahama Mamas Nightclub", {x=-1394.8816, y=-599.7526, z=30.319544}},
	{"Janitors House", {x=-110.20285, y=-8.6156025, z=70.51957}},
	{"Therapists House", {x=-1913.8342, y=-574.5799, z=11.435149}},
	{"Martin Madrazos House", {x=1395.2512, y=1141.6833, z=114.63437}},
	{"Floyds Apartment", {x=-1156.5099, y=-1519.0894, z=10.632717}},
	{"Michaels House", {x=-813.8814, y=179.07889, z=72.15914}},
	{"Franklins House (Strawberry)", {x=-14.239959, y=-1439.6913, z=31.101551}},
	{"Franklins House (Vinewood Hills)", {x=7.3125067, y=537.3615, z=176.02803}},
	{"Trevors House", {x=1974.1617, y=3819.032, z=33.436287}},
	{"Lesters House", {x=1273.898, y=-1719.304, z=54.771}},
	{"Lesters Warehouse", {x=713.5684, y=-963.64795, z=30.39534}},
	{"Lesters Office", {x=707.2138, y=-965.5549, z=30.412853}},
	{"Meth Lab", {x=1391.773, y=3608.716, z=38.942}},
	{"Acid Lab", {x=484.69, y=-2625.36, z=-49.0}},
	{"Morgue Lab", {x=495.0, y=-2560.0, z=-50.0}},
	{"Humane Labs", {x=3625.743, y=3743.653, z=28.69009}},
	{"Motel Room", {x=152.2605, y=-1004.471, z=-99.024}},
	{"Police Station", {x=443.4068, y=-983.256, z=30.689589}},
	{"Bank Vault", {x=263.39627, y=214.39891, z=101.68336}},
	{"Blaine County Bank", {x=-109.77874, y=6464.8945, z=31.626724}}, -- credit to fluidware for telling me about this one
	{"Tequi-La-La Bar", {x=-564.4645, y=275.5777, z=83.074585}},
	{"Scrapyard Body Shop", {x=485.46396, y=-1315.0614, z=29.2141}},
	{"The Lost MC Clubhouse", {x=980.8098, y=-101.96038, z=74.84504}},
	{"Vangelico Jewlery Store", {x=-629.9367, y=-236.41296, z=38.057056}},
	{"Airport Lounge", {x=-913.8656, y=-2527.106, z=36.331566}},
	{"Morgue", {x=240.94368, y=-1379.0645, z=33.74177}},
	{"Union Depository", {x=1.298771, y=-700.96967, z=16.131021}},
	{"Fort Zancudo Tower", {x=-2357.9187, y=3249.689, z=101.45073}},
	{"Agency Interior", {x=-1118.0181, y=-77.93254, z=-98.99977}},
	{"Agency Garage", {x=-1071.0494, y=-71.898506, z=-94.59982}},
	{"Terrobyte Interior", {x=-1421.015, y=-3012.587, z=-80.000}},
	{"Bunker Interior", {x=899.5518,y=-3246.038, z=-98.04907}},
	{"IAA Office", {x=128.20, y=-617.39, z=206.04}},
	{"FIB Top Floor", {x=135.94359, y=-749.4102, z=258.152}},
	{"FIB Floor 47", {x=134.5835, y=-766.486, z=234.152}},
	{"FIB Floor 49", {x=134.635, y=-765.831, z=242.152}},
	{"Big Fat White Cock", {x=-31.007448, y=6317.047, z=40.04039}},
	{"Strip Club DJ Booth", {x=121.398254, y=-1281.0024, z=29.480522}},
}

local lscCoords = {
	v3(-356.09048, -134.77142, 40.012955),
	v3(723.11597, -1088.8312, 23.232006),
	v3(-1145.8977, -1991.1444, 14.18357),
	v3(1182.3055, 2645.2324, 38.63961),
	v3(108.85017, 6617.877, 32.673054),
}

local missionEndTeleports = {
	[4] = "Sandy Shores",
	[7] = "Tequi-La-La",
	[8] = "LSIA (Bottom Level)",
	[9] = "Yellow Jack Bar",
	[10] = "Spitroasters Meat House",
	[11] = "Up-n-Atom Burger",
	[13] = "Alamo Fruit Market",
	[25] = "Lesters Warehouse",
	[28] = "Bennys Shop",
	[31] = "Sandy Shores Boat House",
	[42] = "Hookies Food Diner",
	[56] = "Paleto Bay",
	[58] = "Grapeseed Airfield",
	[59] = "Paleto Bay Ammunation",
	[60] = "LSIA (Top Level)",
	[66] = "Observatory",
	[68] = "Casino",
	[72] = "Casino Roof",
	[87] = "Martin Madrazos House",
	[90] = "LS Docks",
	[91] = "Del Perro Pier",
	[97] = "Country Club",
	[114] = "Mount Chiliad"
}

local interiorTpList = {
	[70] = "Bunker", -- 70 thru 80 are bunkers
	[81] = "Mobile Operations Center",
	[83] = "Hangar", -- 83 thru 87 are hangars
	[88] = "Avenger",
	[89] = "Facility", -- 89 thru 97 are facilities
	[102] = "Nightclub Garage",-- 102 thru 111 are garages
	[117] = "Terrorbyte",
	[122] = "Arena Workshop",
	[123] = "Casino",
	[124] = "Penthouse",
	[128] = "Arcade Garage", -- 128 thru 133 are garages
	[146] = "Nightclub",
	[147] = "Kosatka",
	[149] = "Auto Shop", -- 149 thru 153 are auto shops
	[155] = "Agency Office",
	[159] = "Acid Lab",
	[160] = "Freakshop",
	[161] = "Eclipse Blvd Garage",
	[164] = "Scrapyard",
}

local freemodeMissionWarps = {
	[267] = "Junk Energy Skydive",
	[292] = "Bike Service",
	[296] = "Ammunation Contract",
	[304] = "Acid Lab Setup",
	[308] = "Stash House Mission",
	[309] = "Taxi Mission",
	[318] = "Time Trial",
	[324] = "Tow Truck Service"
}

local colors = {
	{-1, "Default"},
	{1, "White"},
	{28, "Pastel Red"},
	{57, "Pastel Light Red"},
	{27, "Red"},
	{48, "Pastel Blue"},
	{26, "Blue"},
	{116, "Dark Blue"},
	{211, "Cyan"},
	{18, "Green"},
	{21, "Violet"},
	{49, "Purple"},
	{24, "Magenta"},
	{30, "Pink"},
	{45, "Pastel Pink"},
	{46, "Lime Green"},
	{12, "Yellow"},
	{109, "Gold"},
	{31, "Pastel Orange"},
	{15, "Orange"},
}

local warnings = {
	joaat("NT_INV"),
	joaat("NT_INV_FREE"),
	joaat("NT_INV_PARTY_INVITE"),
	joaat("NT_INV_PARTY_INVITE_MP"),
	joaat("NT_INV_PARTY_INVITE_MP_SAVE"),
	joaat("NT_INV_PARTY_INVITE_SAVE"),
	joaat("NT_INV_MP_SAVE"),
	joaat("NT_INV_SP_SAVE"),
}

local transactionWarnings = {
	joaat("CTALERT_F"),
	joaat("CTALERT_F_1"),
	joaat("CTALERT_F_2"),
	joaat("CTALERT_F_3"),
	joaat("CTALERT_F_4"),
}

local scripts = {
	"valentineRpReward2",
	"main_persistent",
	"cellphone_controller",
	"shop_controller",
	"stats_controller",
	"timershud",
	"am_npc_invites",
	"fm_maintain_cloud_header_data"
}

local shopScripts = {
	{"Clothes Store", "clothes_shop_mp"},
	{"Barber Shop", "hairdo_shop_mp"},
	{"Tattoo Shop", "tattoo_shop"},
	{"Ammunation", "gunclub_shop"},
	{"Convenience Store", "am_hold_up"},
	{"Los Santos Customs", "carmod_shop"}
}

local my_root = menu.my_root()
local self = my_root:list("Self")
local audio = my_root:list("Audio")
local online = my_root:list("Online")
local players_list = my_root:list("Players")
local lobby = my_root:list("Lobby")
local missions = my_root:list("Missions")
local vehicles = my_root:list("Vehicles")
local weapons = my_root:list("Weapons")
local world = my_root:list("World")
local detections = my_root:list("Detections", {}, "Note: Enabling all detections may lead to a slight drop in fps.")
local modder_detections = detections:list("Modder Detections")
local normal_detections = detections:list("Normal Detections")
local protections = my_root:list("Protections")
local funfeatures = my_root:list("Fun Features")
local misc = my_root:list("Miscellaneous")
local credits = misc:list("Credits", {}, "")

local menus = {}
local hasLink = {}
local function player_list(playerID)
    if NETWORK_IS_SESSION_ACTIVE() and not menus[playerID] then
		local playerRoot = menu.player_root(playerID)
        menus[playerID] = players_list:list(players.get_name(playerID), {}, "", function()
			if not hasLink[playerID] then
		 		menus[playerID]:link(menu.ref_by_rel_path(playerRoot, "JinxScript>Friendly"))
				menus[playerID]:link(menu.ref_by_rel_path(playerRoot, "JinxScript>Trolling & Griefing"))
				menus[playerID]:link(menu.ref_by_rel_path(playerRoot, "JinxScript>Anti-Godmode"))
				menus[playerID]:link(menu.ref_by_rel_path(playerRoot, "JinxScript>Teleport Player"))
				menus[playerID]:link(menu.ref_by_rel_path(playerRoot, "JinxScript>Miscellaneous"))
				hasLink[playerID] = true
			end
        end)
    end
end

local function handle_player_list(playerID)
    local ref = menus[playerID]
    if not players.exists(playerID) then
        if ref then
            menu.delete(ref)
            menus[playerID] = nil
        end
    end
end

players.on_join(player_list)
players.on_leave(handle_player_list)
players.dispatch_on_join()

if not SCRIPT_SILENT_START then
	toast($"Hello, {players.get_name(players.user())}!\nWelcome To JinxScript!\nOfficial Discord: https://discord.gg/hjs5S93kQv")
end

playerHealth = self:slider("Set Player Health", {"playerhealth"}, "", 160, 2147483647, 328, 1, function(health)
	SET_PED_MAX_HEALTH(players.user_ped(), health)
	SET_ENTITY_HEALTH(players.user_ped(), health, players.user_ped(), 0)
end)  
menu.add_value_replacement(playerHealth, 328, "Default")

local proofsList = self:list("Invulnerabilities", {}, "")
for proofs as data do
    proofsList:toggle(data.name, {data.name:lower().."proof"}, "Makes you invulnerable to "..data.name:lower()..".", function(toggled)
        data.on = toggled
    end)
end

util.create_tick_handler(function()
    local local_player = players.user_ped()
    if not menu.get_value(menu.ref_by_path("Self>Immortality")) and not isPlayerInInterior(players.user()) then
        SET_ENTITY_PROOFS(local_player, proofs.bullet.on, proofs.fire.on, proofs.explosion.on, proofs.collision.on, proofs.melee.on, proofs.steam.on, false, proofs.steam.on)
    end
end)

local stealthLevitation
stealthLevitation = self:toggle_loop("Stealth Levitation", {"stealthlevitation"}, "Enables invisibility while levitating hiding your map blip and character from other players.", function()
	if levitation.value then
		vehInvisibility:setState("Locally Visible")
		invisibility:setState("Locally Visible")
		repeat
			yield()
			yield()
		until not levitation.value
		invisibility:setState("Disabled")
		vehInvisibility:setState("Disabled")
	else
		return
	end
end, function()
	invisibility:setState("Disabled") -- so invisibility doesnt stay on if the script or feature is toggled off while levitating
	vehInvisibility:setState("Disabled")
end)

local thrust = self:list("Override Parachute Thrust")
local thrustSpeed = 0.0
thrustSlider = thrust:slider_float("Thrust Speed", {"thrust"}, "", 0, 500, 0, 10, function(value)
	thrustSpeed = value/100
end)
menu.add_value_replacement(thrustSlider, 0, "Default")

thrust:toggle_loop("Override Thrust", {"parachutethrust"}, "Overrides the speed you thrust at while parachuting.", function()
	SET_PARACHUTE_TASK_THRUST(players.user_ped(), thrustSpeed)
end)

self:toggle("Prevent Auto Seat Shuffle", {}, "Prevents auto shuffling over to drivers seat if it becomes free.", function(toggled)
	SET_PED_CONFIG_FLAG(players.user_ped(), 184, toggled)
end)

self:toggle_loop("Instantly Get Up After Ragdoll", {}, "", function()
	SET_PED_CONFIG_FLAG(players.user_ped(), 227, IS_PLAYER_PLAYING(players.user()))
end)

self:toggle("Disable Radar", {"noradar"}, "", function(toggled)
	DISPLAY_RADAR(not toggled)
end)

self:toggle("BST Mode", {"bstmode"}, "BST without the Post FX and sound effects.", function(toggled)
	SET_PLAYER_WEAPON_DAMAGE_MODIFIER(players.user(), toggled ? 1.44 : 0.72)
	SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(players.user(), toggled ? 2.0 : 1.0)
	SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER(players.user(), toggled ? 0.5 : 1.0)
end)

self:toggle("Fast Roll", {"fastroll"}, "", function(toggled)
	menu.ref_by_path("Self>No Combat Roll Cooldown").value = toggled
end)

self:toggle_loop("Enable Ducking", {}, "Makes your ped duck instead of entering stealth movement. Press Ctrl to use.", function()
	memory.write_int(allowDuckingAddr + 0x4DC, 1)
	if GET_PED_STEALTH_MOVEMENT(players.user_ped()) then
		TASK_TOGGLE_DUCK(players.user_ped(), IS_PED_DUCKING(players.user_ped()) ? TOGGLE_DUCK_OFF : TOGGLE_DUCK_ON)
		SET_PED_STEALTH_MOVEMENT(players.user_ped(), false, 0)
	end
end, function()
	TASK_TOGGLE_DUCK(players.user_ped(), TOGGLE_DUCK_OFF)
	memory.write_int(allowDuckingAddr + 0x4DC, 0)
end)

self:action("Clear Ped Tasks", {"clearpedtasks", "cleartasks"}, "Clears your players current tasks.", function()
	CLEAR_PED_TASKS_IMMEDIATELY(players.user_ped())
end)

local copPerception = world:list("Override Cop Perception")
local copSeeingRange = 60.0
local copSeeingRangeSlider = copPerception:slider_float("Cop Seeing Range", {"copseeingrange"}, "The range in which cops will be alerted to your presence.", 0, 10000, 6000, 100, function(value)
	copSeeingRange = value/100
end)
menu.add_value_replacement(copSeeingRangeSlider, 6000, "Default")

local copHearingRange = 60.0
local copHearingRangeSlider = copPerception:slider_float("Cop Hearing Range", {"cophearingrange"}, "The range in which cops will be able to hear you.", 0, 10000, 6000, 100, function(value)
	copHearingRange = value/100
end)
menu.add_value_replacement(copHearingRangeSlider, 6000, "Default")

copPerception:toggle_loop("Override Cop Perception", {}, "", function()
	SET_COP_PERCEPTION_OVERRIDES(copSeeingRange, 5.0, copHearingRange, -90.0, 90.0, 60.0, -1.0)
end)

world:toggle_loop("Non-Hostile Peds", {"friendlyai"}, "Makes NPCs unable to target you.", function()
	SET_PED_RESET_FLAG(players.user_ped(), 124, true)
end)

world:toggle("Ped Riot Mode", {}, "", function(toggled)
	SET_RIOT_MODE_ENABLED(toggled)
end)

world:toggle_loop("Disable Post FX", {"disablepostfx"}, "", function() 
	ANIMPOSTFX_STOP_ALL()
end)

local gravityThings = {
	[0] = "Normal Gravity",
	"Moon Gravity",
	"Low Gravity",
	"Zero Gravity"
}
gravityLevel = world:slider("Set Gravity Level", {"gravity"}, "Changes the gravity of your vehicle and player.", 0, 3, 0, 1, function(index)
	SET_VEHICLE_GRAVITY(entities.get_user_vehicle_as_handle(), true)
	SET_PED_GRAVITY(players.user_ped(), true)
	SET_GRAVITY_LEVEL(index)
end)
for index, name in gravityThings do
	menu.add_value_replacement(gravityLevel, index, name)
end

local activeTrain = false
world:slider_float("Set Train Speed", {"trainspeed"}, "", 100, 8000, 1000, 100, function(speed)
	for entities.get_all_vehicles_as_handles() as vehicle do
		if IS_THIS_MODEL_A_TRAIN(GET_ENTITY_MODEL(vehicle)) then 
			activeTrain = true
			SET_TRAIN_CRUISE_SPEED(vehicle, speed/100)
		end
	end
	if not activeTrain then 
		toast("No trains were found. :/")
		return
	end
end)

local weather = world:list("Weather")
weather:toggle_loop("Force Lightning", {"forcelightning"}, "", function()
	FORCE_LIGHTNING_FLASH()
	yield(math.random(1000, 5000))
end)

local rainIntensity = weather:slider_float("Rain Intensity", {"rainintensity"}, "", -1, 100, -1, 1, function(value)
	SET_RAIN(value / 100)
end)
menu.add_value_replacement(rainIntensity, -1, "Default")
menu.add_value_replacement(rainIntensity, 0, "No Rain")

local snowIntensity = weather:slider_float("Snow Intensity", {"snowintensity"}, "Note: This only works when the current weather type is snowy.", -1, 100, -1, 1, function(value)
	SET_SNOW(value / 100)
end)
menu.add_value_replacement(snowIntensity, -1, "Default")
menu.add_value_replacement(snowIntensity, 0, "No Snow")

local windSpeed = weather:slider_float("Wind Intensity", {"windspeed"}, "This effects stuff like puddles and such.", -1, 100, -1, 1, function(value)
	SET_WIND(value / 100)
end)
menu.add_value_replacement(windSpeed, -1, "Default")
menu.add_value_replacement(windSpeed, 0, "No Wind")


world:action("Smooth Teleport To Waypoint", {"smoothtp"}, "", function()
	if not IS_WAYPOINT_ACTIVE() then
		toast(lang.get_localised(BLIPNFND))
		return
	end

	local waypoint = GET_BLIP_INFO_ID_COORD(GET_FIRST_BLIP_INFO_ID(GET_WAYPOINT_BLIP_ENUM_ID()))
	local vehicle = GET_VEHICLE_PED_IS_USING(players.user_ped())

	local ground = false
	repeat
		ground, waypoint.z = util.get_ground_z(waypoint.x, waypoint.y)
		yield()
	until ground

	invisibility:setState("Enabled")

	if vehicle != 0 then
		SET_ENTITY_VISIBLE(vehicle, false)
	end

	SWITCH_TO_MULTI_FIRSTPART(players.user_ped(), 8, 1)
	BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("PM_WAIT")
	END_TEXT_COMMAND_BUSYSPINNER_ON(4)

	repeat
		yield()
	until IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED()

	if vehicle == 0 then
		SET_ENTITY_COORDS_NO_OFFSET(players.user_ped(), waypoint, false, false, false)
	else
		SET_ENTITY_VISIBLE(vehicle, false)
		SET_ENTITY_COORDS_NO_OFFSET(vehicle, waypoint, false, false, false)
	end

	SWITCH_TO_MULTI_SECONDPART(players.user_ped())
	ALLOW_PLAYER_SWITCH_OUTRO() 

	repeat
		yield()
	until not IS_PLAYER_SWITCH_IN_PROGRESS()
	
	if vehicle == 0 then
		NETWORK_FADE_IN_ENTITY(players.user_ped(), true, true)
	else
		NETWORK_FADE_IN_ENTITY(vehicle, true, 1)
		NETWORK_FADE_IN_ENTITY(players.user_ped(), true, true)
		SET_ENTITY_VISIBLE(vehicle, true)
	end
	
	invisibility:setState("Disabled")
	BUSYSPINNER_OFF()
end)

local teleport = world:list("Teleport")
for locations as data do
    local location_name = data[1]
    local location_coords = data[2]
    teleport:action(location_name, {}, "", function()
        local vehicle = GET_VEHICLE_PED_IS_USING(players.user_ped())
        menu.trigger_commands("doors on")
        menu.trigger_commands("nodeathbarriers on")
        local entity = (vehicle != 0) and vehicle or players.user_ped()
        SET_ENTITY_COORDS_NO_OFFSET(entity, v3(location_coords), false, false, false)
    end)
end

world:textslider("Clear Area", {}, "", {"Peds", "Vehicles", "Objects", "Pickups", "Projectiles", "Sounds"}, function(index, name)
    local counter = 0
    switch index do
        case 1:
            for entities.get_all_peds_as_handles() as ped do
                if ped ~= players.user_ped() and not IS_PED_A_PLAYER(ped) then
                    entities.delete_by_handle(ped)
                    counter += 1
                    util.yield()
                end
            end
            break
        case 2:
            for entities.get_all_vehicles_as_handles() as vehicle do
				local owner = entities.get_owner(vehicle)
                if vehicle ~= GET_VEHICLE_PED_IS_IN(players.user_ped(), false) and DECOR_GET_INT(vehicle, "Player_Vehicle") == 0 and (owner == players.user() or owner == -1) then
                    entities.delete_by_handle(vehicle)
                    counter += 1
                end
                util.yield()
            end
            break
        case 3:
            for entities.get_all_objects_as_handles() as object do
                entities.delete_by_handle(object)
                counter += 1
                util.yield()
            end
            break
        case 4:
            for entities.get_all_pickups_as_handles() as pickup do
                entities.delete_by_handle(pickup)
                counter += 1
                util.yield()
            end
            break
        case 5:
            CLEAR_AREA_OF_PROJECTILES(players.get_position(players.user()), 1000.0, 0)
            counter = "all"
            break
        case 6:
            for i = 0, 99 do
                STOP_SOUND(i)
                util.yield()
            end
        break
    end
    util.toast($"Cleared {tostring(counter)} {name:lower()}.")
end)

audio:toggle_loop("Disable Footstep Sounds", {"disablefootsteps"}, "Disables footstep sounds.", function()
	SET_PED_CLOTH_EVENTS_ENABLED(players.user_ped(), false)
	SET_PED_FOOTSTEPS_EVENTS_ENABLED(players.user_ped(), false)
end, function()
	SET_PED_CLOTH_EVENTS_ENABLED(players.user_ped(), true)
	SET_PED_FOOTSTEPS_EVENTS_ENABLED(players.user_ped(), true)
end)

audio:toggle_loop("Disable Wasted Sound", {"disablewastedsound"}, "", function() 
	if memory.read_int(memory.script_global(2707352)) == 0 then -- AUDIO::PLAY_SOUND_FRONTEND(-1, "Wasted", "POWER_PLAY_General_Soundset", true);
		memory.write_int(memory.script_global(2707352), 1)
	end
end, function()
	memory.write_int(memory.script_global(2707352), 0)
end)

audio:toggle_loop("Disable Ped Screams", {"disablepedscreams"}, "Mutes the peds screams.", function()
	for entities.get_all_peds_as_handles() as ped do
		if ped != players.user_ped() then
			DISABLE_PED_PAIN_AUDIO(ped, true)
		end
	end
end)

audio:toggle_loop("Disable Ped Speech", {"disablepedspeech"}, "Mutes the peds audio.", function()
	if getPlayerCurrentShop(players.user()) != -1 then return end
    for entities.get_all_peds_as_handles() as ped do
        if IS_ANY_SPEECH_PLAYING(ped) then
            STOP_CURRENT_PLAYING_SPEECH(ped)
        end
    end
end)

local shopkeeperList = audio:list("Disable Shopkeeper Speech", {}, "Disables shopkeeper speech for the selected options.")
for shopScripts as data do
    local shopName = data[1]
    local shopScript = data[2]
	shopkeeperList:toggle_loop(shopName, {}, "", function()
		if getPlayerCurrentShop(players.user()) == -1 then return end
		for entities.get_all_peds_as_handles() as ped do
			local script = GET_ENTITY_SCRIPT(ped, 0)
			if script == shopScript then
				BLOCK_ALL_SPEECH_FROM_PED(ped, true, true)
			end
		end
	end)
end

audio:toggle_loop("Disable Scripted Music", {"disablefreemodemusic"}, "Disables scripted freemode music caused by missions, gang attacks, etc.", function()
	if AUDIO_IS_MUSIC_PLAYING() and not NETWORK_IS_ACTIVITY_SESSION() then
		TRIGGER_MUSIC_EVENT("GLOBAL_KILL_MUSIC")
	end
end)

audio:toggle_loop("Disable Ambient Sounds", {"disableambientsounds"}, "Disables background noises such as sirens, distant honks, jackhammers, birds, crickets, etc.", function()
	if util.is_session_transition_active() then STOP_AUDIO_SCENE("CHARACTER_CHANGE_IN_SKY_SCENE") return end
	if not IS_AUDIO_SCENE_ACTIVE("CHARACTER_CHANGE_IN_SKY_SCENE") then
		START_AUDIO_SCENE("CHARACTER_CHANGE_IN_SKY_SCENE")
	end
end, function()
	STOP_AUDIO_SCENE("CHARACTER_CHANGE_IN_SKY_SCENE")
end)

local disableRadioEmittersList = audio:list("Disable Radio Emitters", {}, "Disables the ambient music that emits from things such as boomboxes, interiors, vehicles, etc.")
disableRadioEmittersList:toggle_loop("Indoors", {"disableradioemitters"}, "Disable radio emitters only while indoor.", function()
	if util.is_session_transition_active() then STOP_AUDIO_SCENE("DLC_MPHEIST_TRANSITION_TO_APT_FADE_IN_RADIO_SCENE") return end
	if getPlayerCurrentInterior(players.user()) != 0 then 
		if not IS_AUDIO_SCENE_ACTIVE("DLC_MPHEIST_TRANSITION_TO_APT_FADE_IN_RADIO_SCENE") then
			START_AUDIO_SCENE("DLC_MPHEIST_TRANSITION_TO_APT_FADE_IN_RADIO_SCENE") -- MP_POSITIONED_RADIO_MUTE_SCENE didnt want to work in story mode
		end
	end
end, function()
	STOP_AUDIO_SCENE("DLC_MPHEIST_TRANSITION_TO_APT_FADE_IN_RADIO_SCENE")
end)

disableRadioEmittersList:toggle_loop("Outdoors", {"disableradioemitters"}, "Disable radio emitters only while outdoor.", function()
	if util.is_session_transition_active() then STOP_AUDIO_SCENE("DLC_MPHEIST_TRANSITION_TO_APT_FADE_IN_RADIO_SCENE") return end
	if getPlayerCurrentInterior(players.user()) == 0 then 
		if not IS_AUDIO_SCENE_ACTIVE("DLC_MPHEIST_TRANSITION_TO_APT_FADE_IN_RADIO_SCENE") then
			START_AUDIO_SCENE("DLC_MPHEIST_TRANSITION_TO_APT_FADE_IN_RADIO_SCENE")
		end
	end
end, function()
	STOP_AUDIO_SCENE("DLC_MPHEIST_TRANSITION_TO_APT_FADE_IN_RADIO_SCENE")
end)

audio:toggle("Disable Distant Sirens", {"disablesirens"}, "Disables the distant siren sounds you hear in freemode.", function(toggled)
	DISTANT_COP_CAR_SIRENS(not toggled)
end)

audio:toggle_loop("Disable Vehicle Audio", {"disablevehicleaudio"}, "Mutes all vehicle audio except for your own vehicle.", function()
	if util.is_session_transition_active() or getPlayerCurrentShop(players.user()) != -1 then STOP_AUDIO_SCENE("MP_CAR_MOD_SHOP") return end
	if not IS_AUDIO_SCENE_ACTIVE("MP_CAR_MOD_SHOP") then
		START_AUDIO_SCENE("MP_CAR_MOD_SHOP")
	end
end, function()
	STOP_AUDIO_SCENE("MP_CAR_MOD_SHOP")
end)

audio:toggle_loop("Disable Radio", {"disableradio"}, "Disables the radio audio.", function()
	if not IS_AUDIO_SCENE_ACTIVE("CAR_MOD_RADIO_MUTE_SCENE") then
		START_AUDIO_SCENE("CAR_MOD_RADIO_MUTE_SCENE")
	end
end, function()
	STOP_AUDIO_SCENE("CAR_MOD_RADIO_MUTE_SCENE")
end)


audio:toggle_loop("Disable Vehicle Alarms", {"disablevehiclealarms"}, "Disables the alarms that go off when stealing a car.", function()
	local vehicle = GET_VEHICLE_PED_IS_TRYING_TO_ENTER(players.user_ped())
	if IS_VEHICLE_ALARM_ACTIVATED(vehicle) then
		SET_VEHICLE_ALARM(vehicle, false)
	end
end)	

audio:toggle_loop("Disable Vehicle Horn On Ped Death", {"disablehornondeath"}, "Disables the horn that sometimes goes off when a ped dies in their car.", function()
	for entities.get_all_peds_as_handles() as ped do 
		SET_PED_CONFIG_FLAG(ped, 46, true)
	end
end, function()
	for entities.get_all_peds_as_handles() as ped do 
		SET_PED_CONFIG_FLAG(ped, 46, false)
	end
end)


local disableWeatherNoiseList = audio:list("Disable Weather Noise", {}, "Choose to disable different types of weather noises.")
disableWeatherNoiseList:toggle_loop("Disable Wind Noises", {"disablewind"}, "", function()
	if util.is_session_transition_active() then STOP_AUDIO_SCENE("PROLOGUE_MUTE_SPRINKLERS") return end
	if GET_RAIN_LEVEL() > 0.0 then return end
	if not IS_AUDIO_SCENE_ACTIVE("PROLOGUE_MUTE_SPRINKLERS") then
		START_AUDIO_SCENE("PROLOGUE_MUTE_SPRINKLERS")
	end
end, function()
	STOP_AUDIO_SCENES()
end)

disableWeatherNoiseList:toggle_loop("Disable Rain Noises", {"disablerain"}, "", function()
	if util.is_session_transition_active() then STOP_AUDIO_SCENE("PROLOGUE_MUTE_SPRINKLERS") return end
	if GET_PREV_WEATHER_TYPE_HASH_NAME() != joaat("thunder") and GET_RAIN_LEVEL() > 0.0 then
		if not IS_AUDIO_SCENE_ACTIVE("PROLOGUE_MUTE_SPRINKLERS") then
			START_AUDIO_SCENE("PROLOGUE_MUTE_SPRINKLERS")
		end
	end
end, function()
	STOP_AUDIO_SCENES()
end)

disableWeatherNoiseList:toggle_loop("Disable Thunder Weather Noises", {"disablethunder"}, "", function()
	if util.is_session_transition_active() then STOP_AUDIO_SCENE("PROLOGUE_MUTE_SPRINKLERS") return end
	if GET_PREV_WEATHER_TYPE_HASH_NAME() == joaat("thunder") then
		if not IS_AUDIO_SCENE_ACTIVE("PROLOGUE_MUTE_SPRINKLERS") then
			START_AUDIO_SCENE("PROLOGUE_MUTE_SPRINKLERS")
		end
	end
end, function()
	STOP_AUDIO_SCENES()
end)

audio:toggle_loop("Disable Frontend Audio", {"disablefrontendaudio"}, 'Disables stuff such as the notification sounds when a freemode event starts, your phone, etc.\n(Note: If you want to hear the menu sounds then press O and select "Correlate State With: Stand Being Open")', function()
	GET_SOUND_ID()
end, function()
	for i = 0, 99 do
		RELEASE_SOUND_ID(i)
	end
end)

local enhancements = online:list("Enhancements")
enhancements:toggle_loop("Disable Vehicle Impound", {}, "Important Note: This will brick stores and Los Santos Customs.", function() -- extremely dumb way to go about it but forcing a job broke stuff
	local vehicle = entities.get_user_vehicle_as_handle()
	local personalVehicle = DECOR_GET_INT(vehicle, "Player_Vehicle")
	if IS_PLAYER_DEAD(players.user()) and vehicle != 0 and personalVehicle != 0 then
		local randomPed = createRandomPed(GET_ENTITY_COORDS(vehicle))
		SET_PED_INTO_VEHICLE(randomPed, vehicle, -1)
		SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(randomPed, true)
		repeat
			yield()
		until not IS_PLAYER_DEAD(players.user())
		yield(2500)
		entities.delete(randomPed)
	end
end)

enhancements:toggle_loop("Disable Clothing Store Animations", {"disableclothesanimations"}, "Disables the annoying animations your ped will play when trying on clothes.", function()
	for entities.get_all_peds_as_handles() as ped do
		if GET_ENTITY_SCRIPT(ped, 0) == "clothes_shop_mp" and (GET_ENTITY_MODEL(ped) == joaat("mp_m_freemode_01") or GET_ENTITY_MODEL(ped) == joaat("mp_f_freemode_01")) then
			CLEAR_PED_TASKS(ped)
		end
	end
end)

enhancements:toggle_loop("Disable Help Text", {}, "", function() 
	HIDE_HELP_TEXT_THIS_FRAME()
end)

enhancements:toggle_loop("Disable NPC Vehicle Dragout", {}, "Prevents angry pedestrians from running up to your vehicle and pulling you out.", function()
	if not IS_PED_IN_ANY_VEHICLE(players.user_ped()) then return end
	for entities.get_all_peds_as_handles() as ped do
		SET_PED_CONFIG_FLAG(ped, 342, true)
	end
end)

enhancements:toggle_loop("Safe Shopping", {"safeshopping"}, "Puts you into a locked session within your session while shopping to ensure a safe shopping experience. Other players will not be able to see that you are in a shop.", function()
	if getPlayerCurrentShop(players.user()) != -1 then
		NETWORK_START_SOLO_TUTORIAL_SESSION()
		while getPlayerCurrentShop(players.user()) != -1 do
			yield()
		end
	    NETWORK_END_TUTORIAL_SESSION()
	end	
end, function()
    NETWORK_END_TUTORIAL_SESSION()
end)

local spoofing = online:list("Spoofing")
spoofing:toggle_loop("Spoof Juggernaut Blip", {"juggernaut"}, "Changes your blip to a skull. Other players will also see this. \nNote: This will prevent some stuff from working. I have tried my best to minimize the issues.", function()
	local minigunHash = joaat("weapon_minigun")
	local vehicle = GET_VEHICLE_PED_IS_USING(players.user_ped())
	if not isNetPlayerOk(players.user()) then return end
	if NETWORK_IS_ACTIVITY_SESSION() or isPlayerInCutscene(players.user()) or isPlayerInInterior(players.user()) then 
		memory.write_int(isPlayerUsingBallisticEquipment(players.user()), 0)
		return 
	end
	
	for lscCoords as lscDoorCoords do
		if v3.distance(players.get_position(players.user()), lscDoorCoords) < 15.0 and vehicle != 0 then
			memory.write_int(isPlayerUsingBallisticEquipment(players.user()), 0)
			return
		end
	end

	if memory.read_int(isPlayerUsingBallisticEquipment(players.user())) == 0 then
		memory.write_int(isPlayerUsingBallisticEquipment(players.user()), minigunHash)
	end
end, function()
	memory.write_int(isPlayerUsingBallisticEquipment(players.user()), 0)
end)

local spoofBlip = spoofing:list("Blip Coords Spoofing")
local blipX = 0.00
spoofBlip:slider_float("X", {"spoofedx"}, "", 0, 1000000, 0, 1, function(x_pos)
	blipX = x_pos/100
end)

local blipY = 0.00
spoofBlip:slider_float("Y", {"spoofedy"}, "", 0, 1000000, 0, 1, function(y_pos)
	blipY = y_pos/100
end)

local blipZ = 0.00
spoofBlip:slider_float("Z (Altitude)", {"spoofedz"}, "", -20000, 270000, 0, 1, function(z_pos)
	blipZ = z_pos/100
end)

spoofBlip:toggle_loop("Spoof Blip Coords", {}, "Note: This will cause issues with the minimap not showing your current location.", function()
	memory.write_int(blipInteriorID(players.user()), 1)
	v3.set(blipInteriorPos(players.user()), blipX, blipY, blipZ)
end, function()
	memory.write_int(blipInteriorID(players.user()), -1)
	v3.set(blipInteriorPos(players.user()), players.get_position(players.user()))
end)


local spoofApartment = spoofing:list("Apartment ID Spoofing", {}, "Note: This may cause apartment invites to mess up depending on the ID.")
local apartmentID = -1
spoofApartmentID = spoofApartment:slider("Apartment ID", {"apartmentid"}, "", -2147483647, 2147483647, -1, 1, function(value)
	apartmentID = value
end)
menu.add_value_replacement(spoofApartmentID, -1, "Default")

spoofApartment:toggle_loop("Spoof Apartment ID", {}, "", function()
	if not isNetPlayerOk(players.user(), true, true) then return end
	memory.write_int(getPlayerProperty(players.user()), isNetPlayerOk(players.user(), true, true) ? apartmentID : -1)
end, function() 
	memory.write_int(getPlayerProperty(players.user()), -1) -- this will be improved at a later date, its fine for now.
end)

local spoofBitset = spoofing:list("Vehicle Bitset Spoofing", {}, "")
local vehBitset = 0
spoofBitset:slider("Vehicle Bitset", {"bitset"}, "", -2147483647, 2147483647, 0, 1, function(value)
	vehBitset = value
end)

spoofBitset:toggle_loop("Spoof Vehicle Bitset", {}, "", function()
	DECOR_SET_INT(entities.get_user_vehicle_as_handle(), "MPBitset", vehBitset)
end)

local moneySpoofing = spoofing:list("Money Spoofing", {}, "")
local walletBalance = 0
moneySpoofing:slider("Cash In Wallet", {"walletbalance"}, "", -2147483647, 2147483647, 0, 1, function(value)
	walletBalance = value
end)

local totalBalance = 0
moneySpoofing:slider("Cash In Total", {"totalbalance"}, "", -2147483647, 2147483647, 0, 1, function(value)
	totalBalance = value
end)

moneySpoofing:toggle_loop("Spoof Wallet Balance", {}, "", function()
	local iTotalCash = memory.script_global(GlobalplayerBD_FM + 1 + (players.user() * 877) + 205 + 3)
	if memory.read_int(iTotalCash) != walletBalance then
		memory.write_int(iTotalCash, walletBalance)
		return
	end
end)

moneySpoofing:toggle_loop("Spoof Total Cash Balance", {}, "", function()
	local iEarnings = memory.script_global(GlobalplayerBD_FM + 1 + (players.user() * 877) + 205 + 56)
	if memory.read_int(iEarnings) != totalBalance then
		memory.write_int(iEarnings, totalBalance)
		return
	end
end)

local overrideChatColor = online:list("Change Nametag Color", {}, "Changes the color of your nametag in chat. Only you can see this.")
local chatColor = 57
overrideChatColor:list_select("Color", {}, "", colors, chatColor, function(color)
	chatColor = color
end)

overrideChatColor:toggle_loop("Change Nametag Color", {}, "", function()
	OVERRIDE_MP_TEXT_CHAT_COLOR(1, chatColor)
end, function()
	OVERRIDE_MP_TEXT_CHAT_COLOR(0, chatColor)
end)


local overrideHudColor = online:list("Change HUD Color", {}, "Changes the color of stuff such as the weapon wheel and some other stuff.")
local hudColor = 57
overrideHudColor:list_select("Color", {}, "", colors, chatColor, function(color)
	hudColor = color
end)

overrideHudColor:toggle_loop("Change HUD Color", {}, "", function()
	SET_CUSTOM_MP_HUD_COLOR(hudColor)
end)

online:toggle_loop("HUD Transition States", {}, "Displays the current transition state in the bottom right corner.", function()
	if util.is_session_transition_active() then
		BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("STRING")
		ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(getTransitionStateName(getTransitionState()))
		END_TEXT_COMMAND_BUSYSPINNER_ON(5)
	else
		BUSYSPINNER_OFF()
	end
end, function()
	BUSYSPINNER_OFF()
end)

online:toggle_loop("Display NAT Type In Overlay", {}, "", function()
	local natTypes = {"Open", "Moderate", "Strict"}
    local getNatType = util.stat_get_int64("_NatType")
    for nat, natType in natTypes do
        if getNatType == nat then
            draw_debug_text($"NAT Type: {natType}")
        end
    end
end)

local auto_accept = online:list("Auto Accept")
auto_accept:toggle_loop("Join Messages", {}, "", function() 
	local msgHash = GET_WARNING_SCREEN_MESSAGE_HASH()
	for warnings as hash do
		if msgHash == hash then
			SET_CONTROL_VALUE_NEXT_FRAME(2, 201, 1.0)
			yield()
			yield()
		end
	end
end)

auto_accept:toggle_loop("Transaction Errors", {}, "", function() 
	local msgHash = GET_WARNING_SCREEN_MESSAGE_HASH()
	for transactionWarnings as hash do
		if msgHash == hash then
			SET_CONTROL_VALUE_NEXT_FRAME(2, 201, 1.0)
			yield()
			yield()
		end
	end
end)

online:toggle("Block Aim Assist", {}, "Blocks players from being able to lock onto you with fists, aim assist, etc.", function(toggled)
	SET_PED_CAN_BE_TARGETTED(players.user_ped(), not toggled)
end)

online:toggle_loop("Auto Claim Bounties", {"autoclaimbounties"}, "Automatically claims bounties that are placed on you.", function()
	local bounty = players.get_bounty(players.user())
	if bounty != nil then
		repeat
			menu.trigger_commands("removebounty")
			yield(1000)
			bounty = players.get_bounty(players.user())
		until bounty == nil
		toast("Bounty has been auto-claimed. :D")
	end
end)

online:toggle_loop("Access Locked Vehicles", {"accesslockedvehicles"}, "Allows you to access players vehicles that have their vehicle access set to no-one.", function()
	local vehicle = GET_VEHICLE_PED_IS_USING(players.user_ped())
	SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle, players.user(), false)
	DECOR_REMOVE(vehicle, "Player_Vehicle")
	SET_VEHICLE_EXCLUSIVE_DRIVER(vehicle, 0, 0)
end)

local tutorial_session_list = lobby:list("Tutorial Session", {}, "Creates a session within your session where you will not recieve other players syncs, and they will not recieve yours. (Note: some stand features may not work when using this.)")
local lockedTutorialSession
lockedTutorialSession = tutorial_session_list:toggle("Enter Locked Tutorial Session", {}, "Creates a locked tutorial session which others can not join.", function(toggled)
	(toggled ? NETWORK_START_SOLO_TUTORIAL_SESSION : NETWORK_END_TUTORIAL_SESSION)()
end)

playerTutorialSessionList = tutorial_session_list:list("Enter Players Tutorial Session")
local playerTutorialSession = playerTutorialSessionList:list_action("Player", {}, "Lists any players in your lobby that are in a tutorial session.", {}, function(playerID)
	if not NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION(players.user(), playerID) then
		NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION(getTeamID(playerID), getInstanceID(playerID))
		repeat
			yield()
		until getTeamID(playerID) == nil or getInstanceID(playerID) == nil
		NETWORK_END_TUTORIAL_SESSION()
	end
end)

util.create_tick_handler(function()
	if not isNetPlayerOk(players.user(), true, true) then return end
	local tutorialPlayers = {}
	for players.list_except() as playerID do
		if getTeamID(playerID) != nil and getInstanceID(playerID) != nil then
			tutorialPlayers[#tutorialPlayers + 1] = {playerID, players.get_name(playerID)}
		end
	end
	menu.set_list_action_options(playerTutorialSession, tutorialPlayers)
	yield(1000)
end)

playerTutorialSessionList:action("Exit Tutorial Session", {"exittutorialsession"}, "Exits the current tutorial session.", function()
	if not NETWORK_IS_IN_TUTORIAL_SESSION() then
		toast("You are not in any tutorial session. :/")
		return
	end
	NETWORK_END_TUTORIAL_SESSION()
end)

tutorial_session = tutorial_session_list:list("Create Tutorial Session")
local team = 0
tutorial_session:slider("Team", {"teamid"}, "", 0, 2, 0, 1, function(value)
	team = value
end)
local instance_id = 0
tutorial_session:slider("Instance ID", {"instanceid"}, "", 0, 63, 0, 1, function(value)
	instance_id = value
end)

local tutorialSession
tutorialSession = tutorial_session:toggle_loop("Enter Tutorial Session", {}, "", function()
	if lockedTutorialSession.value then 
		toast("You can not enable these simultaneously. :/") 
		tutorialSession.value = false
		return 
	end
	local teamID = team
	NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION(teamID, instance_id)
	while teamID == team do
		yield()
	end
end, function()
	NETWORK_END_TUTORIAL_SESSION()
end)

local orbital = lobby:list("Orbital Cannon")
local spoofOrbital = orbital:list("Spoof Position For Orbital Cannon Users")
local spoofOrbPly = spoofOrbital:list("Spoof To Other Players Position")

local playerList = {}
playerList[players.user()] = {players.user(), players.get_name(players.user())}
local selectedPlayer = players.user()
local spoofOrb = spoofOrbPly:list_select("Spoofed Player", {}, "Click to select a player.", playerList, players.user(), function(playerID)
	selectedPlayer = playerID
end)

util.create_tick_handler(function()
	playerList = {}
	for players.list_except() as playerID do
		playerList[#playerList + 1] = {playerID, players.get_name(playerID)}
	end
	menu.set_list_action_options(spoofOrb, playerList)
	yield(1000)
end)

spoofOrbPly:toggle_loop("Enable Spoof", {}, "", function()
	for players.list_except(true) as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pos = players.get_position(selectedPlayer)
		if isPlayerUsingOrbitalCannon(playerID) then
			invisibility:setState("Locally Visible")
			positonSpoofing.value = true
			repeat
				pos.z -= 190
				spoofedPos:trigger(pos:toString())
				pos = players.get_position(selectedPlayer)
				yield()
			until not isPlayerUsingOrbitalCannon(playerID) or not players.exists(playerID)
			invisibility:setState("Disabled")
			positonSpoofing.value = false
		end
	end
end, function()
	invisibility:setState("Disabled")
	positonSpoofing.value = false
end)

local spoofedX = 0.00
spoofOrbital:slider_float("X", {"spoofedxaxis"}, "", 0, 1000000, 0, 1, function(x_pos)
	spoofedX = x_pos/100
end)

local spoofedY = 0.00
spoofOrbital:slider_float("Y", {"spoofedyaxis"}, "", 0, 1000000, 0, 1, function(y_pos)
	spoofedY = y_pos/100
end)

local spoofedZ = 0.00
spoofOrbital:slider_float("Z (Altitude)", {"spoofedzaxis"}, "", -20000, 270000, 0, 1, function(z_pos)
	spoofedZ = z_pos/100
end)

spoofOrbital:toggle_loop("Enable Spoof", {}, "", function()
	for players.list_except(true) as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		if isPlayerUsingOrbitalCannon(playerID) and GET_IS_TASK_ACTIVE(ped, 135) then
			positonSpoofing.value = true
			spoofedPos:trigger(tostring(spoofedX .. "," .. spoofedY .. "," .. spoofedZ))
			repeat
				yield()
			until not isPlayerUsingOrbitalCannon(playerID) or not players.exists(playerID)
			positonSpoofing.value = false
		end
	end
end)

orbital:toggle_loop("Block Orbital Cannon", {"blockorb"}, "", function()
	local blockOrbMdl = joaat("h4_prop_h4_garage_door_01a")
	local blockOrbMdlSign = joaat("xm_prop_x17_screens_02a_07")
	util.request_model(blockOrbMdl)
	util.request_model(blockOrbMdlSign)
	if orbObj == nil or not DOES_ENTITY_EXIST(orbObj) then
		orbObj = entities.create_object(blockOrbMdl, v3(335.9, 4833.9, -59.0))
		orbSign = entities.create_object(blockOrbMdlSign, v3(335.9, 4834, -57.0))
		entities.set_can_migrate(orbObj, false)
		entities.set_can_migrate(orbSign, false)
		SET_ENTITY_HEADING(orbObj, 125.0)
		SET_ENTITY_HEADING(orbSign, 125.0)
		FREEZE_ENTITY_POSITION(orbObj, true)
		SET_ENTITY_NO_COLLISION_ENTITY(players.user_ped(), orbObj, false)
		SET_ENTITY_ROTATION(orbSign, -25.0, 0.0, 125.0, 2, true)
	end
	yield(50)
end, function()
	if orbObj != nil then
		entities.delete(orbObj)
	end
	if orbSign != nil then
		entities.delete(orbSign)
	end
end)

local annoy = orbital:list("Annoy Orbital Cannon Users", {}, "Rapidly shows and removes your name from the targetable players list.")
local orbDelay = 1000
annoy:list_select("Delay", {}, "The speed in which your name will flicker at for orbital cannon users.", {{1000, "Slow"}, {500, "Medium"}, {100, "Fast"}}, orbDelay, function(value)
	orbDelay = value
end)

local annoy_tgl
annoy_tgl = annoy:toggle_loop("Enable", {}, "", function()
	for players.list_except(true) as playerID do
	   if isPlayerUsingOrbitalCannon(playerID) then
			repeat
				SET_REMOTE_PLAYER_AS_GHOST(playerID, true)
				yield(orbDelay)
				SET_REMOTE_PLAYER_AS_GHOST(playerID, false)
				yield(orbDelay)
			until not isPlayerUsingOrbitalCannon(playerID) or not players.exists(playerID)
			SET_REMOTE_PLAYER_AS_GHOST(playerID, false)
		end
	end
end)

local ghostOrb = orbital:list("Ghost Orbital Cannon Users")
ghostOrb:toggle_loop("Always", {"ghostorb"}, "Automatically ghost players that are using the orbital cannon.", function()
	for players.list_except() as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local cam_dist = v3.distance(players.get_position(players.user()), players.get_cam_pos(playerID))
		if isPlayerUsingOrbitalCannon(playerID) and GET_IS_TASK_ACTIVE(ped, 135) then
			SET_REMOTE_PLAYER_AS_GHOST(playerID, true)
			repeat
				yield()
			until not isPlayerUsingOrbitalCannon(playerID)
			SET_REMOTE_PLAYER_AS_GHOST(playerID, false)
		end
	end
end, function()
	for players.list_except(true) as playerID do
		SET_REMOTE_PLAYER_AS_GHOST(playerID, false)
	end
end)

ghostOrb:toggle_loop("While Being Targeted", {}, "Ghost orbital cannon users when you are within the blast radius or being targeted.", function()
	for players.list_except(true) as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pos = players.get_position(players.user())
		local distance = v3.distance(pos, v3.setZ(players.get_cam_pos(playerID), pos.z))
		if isPlayerUsingOrbitalCannon(playerID) and distance < 25.0 and not isPlayerInInterior(players.user()) then
			SET_REMOTE_PLAYER_AS_GHOST(playerID, true)
			repeat
				yield()
			until not isPlayerUsingOrbitalCannon(playerID)
			SET_REMOTE_PLAYER_AS_GHOST(playerID, false)
		end
	end
end, function()
	for players.list_except(true) as playerID do
		SET_REMOTE_PLAYER_AS_GHOST(playerID, false)
	end
end)

orbital:toggle_loop("Ghost Modded Orbital Cannons", {"ghostmoddedorbs"}, "Automatically ghost players that are using a modded orbital cannon.", function()
	for players.list_except() as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local cam_dist = v3.distance(players.get_position(players.user()), players.get_cam_pos(playerID))
		if isPlayerUsingOrbitalCannon(playerID) and not GET_IS_TASK_ACTIVE(ped, 135) then
			SET_REMOTE_PLAYER_AS_GHOST(playerID, true)
			repeat
				yield()
			until not isPlayerUsingOrbitalCannon(playerID)
			SET_REMOTE_PLAYER_AS_GHOST(playerID, false)
		end
	end
end, function()
	for players.list_except(true) as playerID do
		SET_REMOTE_PLAYER_AS_GHOST(playerID, false)
	end
end)

local drawOrbitalCannon = orbital:list("Draw Orbital Cannon Position")
local orbColor = {r = 255/255, g = 0, b = 255/255, a = 0}
drawOrbitalCannon:colour("Marker Color", {"markercolor"}, "Click to select a color.", orbColor, true, function(value)
	orbColor = value 
end)

drawOrbitalCannon:toggle_loop("Draw Position", {}, "", function()
	for players.list_except(true) as playerID do
		if isPlayerUsingOrbitalCannon(playerID) then
			local cam = players.get_cam_pos(playerID)
			local rot, dir =  v3(), v3()
			local ground
			ground, cam.z = util.get_ground_z(cam.x, cam.y)
			if not ground then continue end
			local cam_dist = v3.distance(cam, players.get_cam_pos(playerID))
			DRAW_MARKER(28, cam, rot, dir, 1.0, 1.0, cam_dist, math.floor(orbColor.r * 255), math.floor(orbColor.g * 255), math.floor(orbColor.b * 255), 105, false, false, 0, false, 0, 0, false)
		end
	end
end)

local rp_loop = lobby:list("RP Loop", {}, "Loops RP on everyone in the lobby.")
local level = 120
rp_loop:slider("Stop At Level...", {"maxlevellobby"}, "", 1, 8000, 120, 1, function(val)
	level = val
end)

local delay = 5
rpLoopAll = rp_loop:slider("Loop Delay", {"loopdelaylobby"}, 'Note: setting the delay to "Fastest" will cause a fatal error in bigger lobbies and may lead to some issues.', 0, 2500, 5, 5, function(val)
	delay = val
end)
menu.add_value_replacement(rpLoopAll, 0, "Fastest (Read Description)")
menu.add_value_replacement(rpLoopAll, 5, "Default")

local function triggerCollectibleLoop(playerID, i)
	if players.get_rank(playerID) >= level then return end
	util.trigger_script_event(1 << playerID, {968269233, players.user(), 4, i, 1, 1, 1})
	util.trigger_script_event(1 << playerID, {968269233, players.user(), 8, -1, 1, 1, 1})
end

local lobbyRPLoop
lobbyRPLoop = rp_loop:toggle_loop("Enable Loop", {"rplooplobby"}, "Enables RP Loop on everyone in the lobby.", function()
	if not isNetPlayerOk(players.user(), true, true) then
		lobbyRPLoop.value = false
		return
	end
	for players.list_except(true) as playerID do
		if not menu.player_root(playerID):isValid() then return end
		local giveRP = menu.ref_by_rel_path(menu.player_root(playerID), "Friendly>Give RP")
		if players.is_marked_as_modder(playerID) or players.get_weapon_damage_modifier(playerID) == 1 or not isNetPlayerOk(playerID) or players.get_rank(playerID) >= level then continue end
		if delay == 0 then
			for i = 21, 24 do
				triggerCollectibleLoop(playerID, i)
				giveRP:trigger()
			end
		elseif delay == 5 then
			triggerCollectibleLoop(playerID, math.random(21, 24)) -- limiting the amount of script events sent to prevent a fatal error
		else
			for i = 21, 24 do
				triggerCollectibleLoop(playerID, i)
			end
			yield(delay)
		end
	end	
end)

lobby:action("Hijack All Vehicles", {"hijackall"}, "Spawns a ped to take them out of their vehicle and drive away.", function()
	for players.list_except(true) as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pos = players.get_position(playerID)
		if DOES_ENTITY_EXIST(ped) and IS_PED_IN_ANY_VEHICLE(ped) then
			menu.trigger_commands($"hijack {players.get_name(playerID)}")
		end
	end
end)

lobby:toggle_loop("Lock All Vehicles", {"lockall"}, "", function()
	for players.list_except(true) as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_TRYING_TO_ENTER(ped)
		if not GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle, playerID) then
			SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle, playerID, true)
		end
	end
end)

lobby:toggle_loop("Annoy Weaponized Vehicle Users", {"annoy"}, "", function()
	for _, playerID in players.list_except() do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		if GET_IS_TASK_ACTIVE(ped, 199) then
			SET_VEHICLE_HOMING_LOCKEDONTO_STATE(vehicle, 1)
		end
	end
end)

local horny = lobby:list("Anti-Horny")
local horny_counter = 0
horny:toggle_loop("Punish", {}, "Will punish horny players that are trying to solicit a prostitute by killing them.", function()
	local timer = util.current_time_millis() + 2500
	for players.list_except() as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pPed =  entities.handle_to_pointer(ped)
		local pedPtr = entities.handle_to_pointer(players.user_ped())
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		if isPlayerSolicitingProstitute(playerID) and GET_IS_TASK_ACTIVE(ped, 135) then
			repeat
				if util.current_time_millis() > timer then
					timer = util.current_time_millis() + 2500
					return
				end
				util.call_foreign_function(CWeaponDamageEventTrigger, pedPtr, pPed, pPed + 0x90, 0, 1, joaat("weapon_stungun_mp"), 1000.0, 0, 0, DF_IsAccurate | DF_IgnoreRemoteDistCheck, 0, 0, 0, 0, 0, 0, 0, 0.0)
				yield()
			until IS_PLAYER_DEAD(ped)
			toast($"Killed {players.get_name(playerID)} for being too horny.")
			timer = util.current_time_millis() + 2500
		end
	end
end)

horny:toggle_loop("Humiliate", {}, "Will humiliate horny players that are trying to solicit a prostitute by making fun of them in chat.", function()
	for players.list_except() as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		if isPlayerSolicitingProstitute(playerID) and GET_IS_TASK_ACTIVE(ped, 135) then
			chat.send_message($"Horny person detected! {players.get_name(playerID)} is having sex with a prostitute. HAHA, loser!", false, true, true)
			repeat
				yield()
			until not isPlayerSolicitingProstitute(playerID)
		end
	end
end)

local reversed_messages = {}
local reverse_msg = false
chat.on_message(function(packet_sender, message_sender, text, team_chat)
	if reverse_msg and message_sender != players.user() and not reversed_messages[text] then -- prevent message spam
		chat.send_message(string.reverse(text), false, true, true)
		reversed_messages[text] = {timestamp = os.time()}
	end
end)

lobby:toggle("Reverse Mock Chat Messages", {}, "", function(toggled)
	reverse_msg = toggled
end)

local messageTimeout = 5
util.create_tick_handler(function()
	for msg, messageData in reversed_messages do
		if os.time() - messageData.timestamp > messageTimeout then
			reversed_messages[msg] = nil
		end
	end
end)

missions:action("Kill All Enemies", {}, "", function()
	local counter = 0
	for entities.get_all_peds_as_handles() as ped do
		if GET_BLIP_COLOUR(GET_BLIP_FROM_ENTITY(ped)) == 1 or GET_IS_TASK_ACTIVE(ped, 352) then -- shitty way to go about it but hey, it works (most of the time).
			SET_ENTITY_HEALTH(ped, 0, 0, 0)
			counter += 1
			yield()
		end
	end
	toast(counter == 0 ? "No enemies found. :/" : $"Killed {tostring(counter)} enemies.")
end)

missions:action("Teleport Pickups To Me", {}, "", function()
	local counter = 0
	local pos = players.get_position(players.user())
	for entities.get_all_pickups_as_handles() as pickup do
		SET_ENTITY_COORDS(pickup, pos, false, false, false, false)
		counter += 1
		yield()
	end
	toast(counter == 0 ? "No pickups found. :/" : $"Teleported {tostring(counter)} pickups.")
end)

local pedSeeingRange = missions:list("Ped Seeing Range")
local pedHearingRange = missions:list("Ped Hearing Range")
local pedIdRange = missions:list("Ped ID Range")

local seeingRange = 60.0
local seeingRangeSlider = pedSeeingRange:slider_float("Seeing Range", {"seeingrange"}, "The range in which peds can see you at.", 0, 10000, 6000, 100, function(value)
	seeingRange = value/100
end)
menu.add_value_replacement(seeingRangeSlider, 6000, "Default")

pedSeeingRange:toggle_loop("Override Ped Seeing Range", {}, "", function()
	for entities.get_all_peds_as_handles() as ped do
		SET_PED_SEEING_RANGE(ped, seeingRange)
	end
end, function()
	for entities.get_all_peds_as_handles() as ped do
		SET_PED_SEEING_RANGE(ped, 60.0)
	end
end)

local hearingRange = 60.0
local hearingRangeSlider = pedHearingRange:slider_float("Hearing Range", {"hearingrange"}, "The range in which peds can hear you at.", 0, 10000, 6000, 100, function(value)
	hearingRange = value/100
end)
menu.add_value_replacement(hearingRangeSlider, 6000, "Default")

pedHearingRange:toggle_loop("Override Ped Hearing Range", {}, "", function()
	for entities.get_all_peds_as_handles() as ped do
		SET_PED_HEARING_RANGE(ped, hearingRange)
	end
end, function()
	for entities.get_all_peds_as_handles() as ped do
		SET_PED_HEARING_RANGE(ped, 60.0)
	end
end)

local idRange = 20.0
local idRangeSlider = pedIdRange:slider_float("ID Range", {"idrange"}, "The range in which peds can identify you at.", 0, 10000, 2000, 100, function(value)
	idRange = value/100
end)
menu.add_value_replacement(idRangeSlider, 2000, "Default")

pedIdRange:toggle_loop("Override Ped ID Range", {}, "", function()
	for entities.get_all_peds_as_handles() as ped do
		SET_PED_ID_RANGE(ped, idRange)
	end
end, function()
	for entities.get_all_peds_as_handles() as ped do
		SET_PED_ID_RANGE(ped, 20.0)
	end
end)

weapons:toggle_loop("Double Tap", {"doubletap"}, "Shoots two shots in the same tick.", function()
	if IS_PED_SHOOTING(players.user_ped()) then
		FORCE_PED_AI_AND_ANIMATION_UPDATE(players.user_ped())
	end
end)

weapons:toggle_loop("Instant Reload", {"instantreload"}, "Skips reloading without the issue of causing weapons to rapid fire.", function()
	if IS_PED_RELOADING(players.user_ped()) then
		REFILL_AMMO_INSTANTLY(players.user_ped())
	end
end)

weapons:toggle_loop("Legit Silent Aimbot", {"aimbotall"}, "Toggles an aimbot that expands the players hitbox.", function()
	for players.list_except() as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pPed =  entities.handle_to_pointer(ped)
		local pedPtr = entities.handle_to_pointer(players.user_ped())
		local wpn = GET_SELECTED_PED_WEAPON(players.user_ped())
		local dmg = GET_WEAPON_DAMAGE(wpn, 0)
		local bones = {31086, 24816, 40269, 45509, 0, 51826, 58271}
		if IS_PLAYER_FREE_AIMING_AT_ENTITY(players.user(), ped) and IS_PED_SHOOTING(players.user_ped()) and not IS_ENTITY_A_GHOST(ped) then
			boneIndex = bones[math.random(#bones)]
			local boneCoords = GET_PED_BONE_COORDS(ped, boneIndex, 0.0, 0.0, 0.0)
			util.call_foreign_function(CWeaponDamageEventTrigger, pedPtr, pPed, boneCoords, 0, 1, wpn, dmg, 0, 0, DF_IsAccurate | DF_AllowHeadShot | DF_IgnoreRemoteDistCheck, 0, 0, 0, 0, 0, 0, 0, v3())
		end
	end
end)

local modifier = 1.00
weapons:slider_float("Melee Damage Modifier", {"meleedamage"}, "", 100, 1000, 100, 10, function(value)
	modifier = value / 100
	SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(players.user(), modifier)
end)

weapons:toggle_loop("Infinite Lockon Range", {}, "Sets your players lockon range with homing missles and auto aim to the max.", function()
	SET_PLAYER_LOCKON_RANGE_OVERRIDE(players.user(), 99999999.0)
end)

weapons:toggle_loop("Increase Weapon Range", {}, "Extends weapon range to 250m.", function()
	SET_PED_RESET_FLAG(players.user_ped(), 95, GET_MAX_RANGE_OF_CURRENT_PED_WEAPON(players.user_ped()) < 250.0)
end)

local overrideBulletProjectile = false
local changeBulletProjectile = weapons:list("Change Bullet Projectile", {}, "Change the bullet your gun shoots.")
for id, data in weapon_stuff do
	local name = data[1]
	local weaponName = data[2]
	local bulletProjectile
	bulletProjectile = changeBulletProjectile:toggle_loop(name, {}, "", function()
		overrideBulletProjectile = true
		local wpn = GET_SELECTED_PED_WEAPON(players.user_ped())
		local shotDelay = GET_WEAPON_TIME_BETWEEN_SHOTS(wpn)
		local inst = v3.new()
		if IS_CONTROL_PRESSED(0, 92) and IS_PLAYER_FREE_AIMING(players.user()) then
			local finalCoords = GET_FINAL_RENDERED_CAM_ROT(2):toDir():mul(1000):add(players.get_cam_pos(players.user()))
			local wpEnt = GET_CURRENT_PED_WEAPON_ENTITY_INDEX(players.user_ped(), 0)
			local wpCoords = GET_ENTITY_BONE_POSTION(wpEnt, GET_ENTITY_BONE_INDEX_BY_NAME(wpEnt, "gun_muzzle"))
			SHOOT_SINGLE_BULLET_BETWEEN_COORDS(wpCoords, finalCoords, 1, true, joaat(weaponName), players.user_ped(), true, false, 1000.0)
			yield(shotDelay * 1000)
		end
	end, function()
		local pos = players.get_position(players.user())
		CLEAR_AREA_OF_PROJECTILES(pos, 999999.0, 0)
	    overrideBulletProjectile = false
	end)
end

util.create_tick_handler(function()
	while true do
		if overrideBulletProjectile then
			DISABLE_PLAYER_FIRING(players.user(), false)
		end
		yield()
	end
end)

weapons:toggle_loop("Fast Hands", {"fasthands"}, "Swaps your weapons faster.", function()
	if GET_IS_TASK_ACTIVE(players.user_ped(), 56) then
		FORCE_PED_AI_AND_ANIMATION_UPDATE(players.user_ped())
	end
end)

weapons:toggle_loop("Lock On To Players", {}, "Allows you to lock on to players with the homing launcher.", function()
	for players.list_except(true) as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		ADD_PLAYER_TARGETABLE_ENTITY(players.user(), ped)
		SET_ENTITY_IS_TARGET_PRIORITY(ped, false, 400.0)    
	end
end, function()
	for players.list_except(true) as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		REMOVE_PLAYER_TARGETABLE_ENTITY(players.user(), ped)
	end
end)

local nitrous = vehicles:list("Nitrous", {}, "Note: Other players can also see this, but, their game will have to load the ptfx asset on their side. The game usually does this rather quickly but sometimes it just doesn't load for others.")
local durationMod = 1.0
nitrous:slider_float("Duration", {"duration"}, "The amount of seconds that the nitrous will last.", 100, 1000, 300, 50, function(value)
	durationMod = value/300 -- this seems to be the exact conversion for converting the float to seconds
	--toast(value/300)
end)

local powerMod = 1.5
nitrous:slider_float("Power Multiplier", {"multiplier"}, "", 100, 1000, 150, 50, function(value)
	powerMod = value/100
end)

local rechargeMod = 2.0
nitrous:slider_float("Recharge Time", {"rechargetime"}, "Note: The recharge speed may change based on the duration.", 100, 1000, 200, 50, function(value)
	rechargeMod = value/100
end)

nitrous:toggle("Use Horn Button For Nitrous", {}, "", function(toggled)
	_SET_VEHICLE_USE_HORN_BUTTON_FOR_NITROUS(toggled)
end)

nitrous:toggle_loop("Disable On Key Release", {}, "Disables nitrous when you let go of the W key.", function(toggled)
	local vehicle = entities.get_user_vehicle_as_handle()
	if IS_CONTROL_JUST_RELEASED(0, 71) and IS_NITROUS_ACTIVE(vehicle) then
		SET_OVERRIDE_NITROUS_LEVEL(vehicle, false, durationMod, powerMod, rechargeMod, false) -- SET_NITROUS_IS_ACTIVE didnt wanna work here cus gay
	end
end)

nitrous:toggle_loop("Disable In Air", {}, "", function(toggled)
	local vehicle = entities.get_user_vehicle_as_handle()
	if IS_ENTITY_IN_AIR(vehicle) then
		SET_OVERRIDE_NITROUS_LEVEL(vehicle, false, durationMod, powerMod, rechargeMod, false) -- SET_NITROUS_IS_ACTIVE didnt wanna work here cus gay
	end
end)


local nitrousPtfxActive = false
nitrous:action("Load PTFX For Nearby Players", {"loadnitrousptfx"}, "Loads the nitrous PTFX for nearby players so that they can also see the flames.", function() 
	local vehicle = entities.get_user_vehicle_as_handle()
	loadPtfxAsset("veh_xs_vehicle_mods")
	USE_PARTICLE_FX_ASSET("veh_xs_vehicle_mods")
	if nitrousPtfxActive then
		toast("This is already active, please wait...")
		return
	end
	ptfx = START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY("veh_nitrous", vehicle, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, false, false, false, 0, 0, 0, 255)
	nitrousPtfxActive = true
	toast("Loading PTFX...")
	yield(5000)
	REMOVE_PARTICLE_FX(ptfx)
	toast("PTFX should now be loaded for nearby players. :D")
	nitrousPtfxActive = false
end)


local clearedNitrous = false
local nitrousTgl
nitrousTgl = nitrous:toggle_loop("Enable Nitrous", {"nitrous"}, "Default Nitrous button is X.", function()
	if GET_HAS_ROCKET_BOOST(entities.get_user_vehicle_as_handle()) then return end
	if not clearedNitrous then
		CLEAR_NITROUS(entities.get_user_vehicle_as_handle()) -- clearing nitrous on feature startup because the bar doesn't go down if enabled while full.
		clearedNitrous = true
		return
	else
		loadPtfxAsset("veh_xs_vehicle_mods")
		local vehicle = entities.get_user_vehicle_as_handle()
		SET_OVERRIDE_NITROUS_LEVEL(vehicle, true, durationMod, powerMod, rechargeMod, false)
		if not IS_NITROUS_ACTIVE(vehicle) then
			SET_NITROUS_IS_ACTIVE(vehicle, false) -- disable the nitrous ptfx when not active, removing the ptfx still left the lights from the ptfx behind
			return
		end
	end
end, function()
	SET_OVERRIDE_NITROUS_LEVEL(entities.get_user_vehicle_as_handle(), false, 0.0, 0.0, 0.0, false)
	clearedNitrous = false
end)

local flamethrowerTune = vehicles:list("Flamethrower Tune", {}, "")
local redline
redline = flamethrowerTune:toggle_loop("On Redline", {}, "", function()
	if not nitrousTgl.value then 
		toast("Please enable nitrous to use this feature. :/")
		redline.value = false
		return
	end
	loadPtfxAsset("veh_xs_vehicle_mods")
	local vehPtr = entities.get_user_vehicle_as_pointer()
	local vehHandle = entities.get_user_vehicle_as_handle()
	if vehPtr == 0 then return end
	SET_NITROUS_IS_ACTIVE(vehHandle, entities.get_rpm(vehPtr) == 1.0 and entities.get_current_gear(vehPtr) == 1)
end)

local downshift
downshift = flamethrowerTune:toggle_loop("On Downshift", {}, "", function()
	if not nitrousTgl.value then 
		toast("Please enable nitrous to use this feature. :/")
		downshift.value = false
		return
	end
	loadPtfxAsset("veh_xs_vehicle_mods")
	local vehPtr = entities.get_user_vehicle_as_pointer()
	local vehHandle = entities.get_user_vehicle_as_handle()
	if vehPtr == 0 then return end
	local prevGear = entities.get_current_gear(vehPtr)
	yield()
	yield()
	local curGear = entities.get_current_gear(vehPtr)
	if curGear < prevGear then
		for i = 1, 25 do
			SET_NITROUS_IS_ACTIVE(vehHandle, true)
			yield()
		end
	end
end)

local upshift
upshift = flamethrowerTune:toggle_loop("On Upshift", {}, "", function()
	if not nitrousTgl.value then 
		toast("Please enable nitrous to use this feature. :/")
		upshift.value = false
		return
	end
	loadPtfxAsset("veh_xs_vehicle_mods")
	local vehPtr = entities.get_user_vehicle_as_pointer()
	local vehHandle = entities.get_user_vehicle_as_handle()
	if vehPtr == 0 then return end
	local prevGear = entities.get_current_gear(vehPtr)
	yield()
	yield()
	local curGear = entities.get_current_gear(vehPtr)
	if curGear > prevGear then
		for i = 1, 25 do
			SET_NITROUS_IS_ACTIVE(vehHandle, true)
			yield()
		end
	end
end)

local accelerating
accelrating = flamethrowerTune:toggle_loop("While Accelerating", {}, "", function()
	if not nitrousTgl.value then 
		toast("Please enable nitrous to use this feature. :/")
		accelrating.value = false
		return
	end
	loadPtfxAsset("veh_xs_vehicle_mods")
	local vehicle = entities.get_user_vehicle_as_handle()
	SET_NITROUS_IS_ACTIVE(vehicle, IS_CONTROL_PRESSED(0, 71))
end)

local alwaysOn
alwaysOn = flamethrowerTune:toggle_loop("Always On", {}, "", function()
	if not nitrousTgl.value then 
		toast("Please enable nitrous to use this feature. :/")
		alwaysOn.value = false
		return
	end
	loadPtfxAsset("veh_xs_vehicle_mods")
	local vehicle = entities.get_user_vehicle_as_handle()
	SET_NITROUS_IS_ACTIVE(vehicle, true)
end)

flamethrowerTune:action("Load PTFX For Nearby Players", {}, "Loads the nitrous PTFX for nearby players so that they can also see the flames.", function() 
	menu.trigger_commands("loadnitrous")
end)

local antilag = vehicles:list("Anti-Lag", {}, "")
local antilagDelay = 100
antilag:slider("Delay", {"antilagdelay"}, "The interval in which the exhaust will pop.", 0, 1000, 100, 10, function(amount)
	antilagDelay = amount
end)

local random = false
antilag:toggle("Randomize", {}, "Randomizes the interval in which the exhaust will pop. (Note: randomize will use the delay as the max delay.)", function(toggled)
	random = toggled
end)

antilag:toggle_loop("Anti-Lag", {"antilag"}, "Rev your engine to use. Only works when vehicle is still. Doesn't network with other players.", function()
	local veh = entities.get_user_vehicle_as_pointer()
	if veh == 0 then return end
	local gear = entities.get_current_gear(veh)
	local rpm = entities.get_rpm(veh)
	if IS_CONTROL_PRESSED(0, 22) and IS_CONTROL_PRESSED(0, 71) then
		entities.set_rpm(veh, 0.9)
		yield(random ? math.random(100, antilagDelay) : antilagDelay)
		entities.set_rpm(veh, 0.1)
	end
end)

local wheelie = vehicles:list("Wheelie")
local wheelie_val = 0.3
wheelie:slider_float("Wheelie Power", {"wheeliepower"}, "", 10, 100, 30, 5, function(value)
	wheelie_val = value / 100
end)

wheelie:toggle_loop("Enable", {}, "Press Ctrl and W to wheelie.", function()
	local CAutomobile = entities.get_user_vehicle_as_pointer()
	if CAutomobile == 0 then return end
	local vehicleModel = GET_ENTITY_MODEL(entities.get_user_vehicle_as_handle())
	if not IS_THIS_MODEL_A_CAR(vehicleModel) and not IS_THIS_MODEL_AN_AMPHIBIOUS_CAR(vehicleModel) then 
		return 
	end
	local CHandlingData = entities.vehicle_get_handling(CAutomobile)
	memory.write_float(CHandlingData + 0x00EC, IS_CONTROL_PRESSED(0, 71) and IS_CONTROL_PRESSED(0, 280) ? -wheelie_val : 0.5)
end)

local clumsiness = vehicles:list("Clumsiness", {}, "Makes your vehicle easy to roll.")
local clumsy_val = 0.3
clumsiness:slider_float("Clumsiness", {"clumsinessvalue"}, "", 10, 100, 30, 5, function(value)
	clumsy_val = value / 100
end)

clumsiness:toggle_loop("Enable", {"vehicleclumsiness"}, "", function()
	local CAutomobile = entities.get_user_vehicle_as_pointer()
	if CAutomobile == 0 then return end
	local vehicleModel = GET_ENTITY_MODEL(entities.get_user_vehicle_as_handle())
	if not IS_THIS_MODEL_A_CAR(vehicleModel) and not IS_THIS_MODEL_AN_AMPHIBIOUS_CAR(vehicleModel) then 
		return 
	end
	local CHandlingData = entities.vehicle_get_handling(CAutomobile)
	memory.write_float(CHandlingData + 0x00EC, IS_CONTROL_PRESSED(0, 266) or IS_CONTROL_PRESSED(0, 267) ? -clumsy_val : 0.5)
end, function()
	local CAutomobile = entities.get_user_vehicle_as_pointer()
	if CAutomobile == 0 then return end
	local CHandlingData = entities.vehicle_get_handling(CAutomobile)
	memory.write_float(CHandlingData + 0x00EC, 0.5)
end)


local engineSound = vehicles:list("Change Engine Sound", {}, "Note: Some engine sounds may affect your vehicle acceleration. Vehicle upgrades such as engine or exhause also effect the sound.")
local vehicleClass = {}
local ignore_duplicates = {} 
for util.get_vehicles() as vehicle do
	local name = util.get_label_text(vehicle.name)
	local hash = joaat(vehicle.name)
	local vehClassName = GET_VEHICLE_CLASS_FROM_NAME(hash)

	if ignore_class or name == "NULL" or ignore_duplicates[name] or (not IS_THIS_MODEL_A_CAR(hash) and not IS_THIS_MODEL_A_BIKE(hash) and not IS_THIS_MODEL_A_QUADBIKE(hash)) then 
		continue 
	end
	if not vehicleClass[vehClassName] then
		vehicleClass[vehClassName] = engineSound:list(util.get_label_text($"VEH_CLASS_{vehClassName}"))
	end
	ignore_duplicates[name] = true
	engineSound.action(vehicleClass[vehClassName], name, {$"engine {name}"}, "", function()
		PRELOAD_VEHICLE_AUDIO_BANK(hash)
		SET_RADIO_TO_STATION_NAME("OFF") -- the radio kept changing for some reason so this should fix that
		FORCE_USE_AUDIO_GAME_OBJECT(entities.get_user_vehicle_as_handle(), vehicle.name)
		yield(100)
		SET_RADIO_TO_STATION_NAME("OFF") -- sometimes it doesn't turn off
	end)
end

vehicles:toggle_loop("Disable Radio On Vehicle Entry", {}, "", function()
	local vehicle = GET_VEHICLE_PED_IS_USING(players.user_ped())
	if GET_PLAYER_RADIO_STATION_NAME() != "OFF" and GET_IS_VEHICLE_ENGINE_RUNNING(vehicle) then
		yield(150)
		SET_RADIO_TO_STATION_NAME("OFF")
		repeat
			local curVehicle = GET_VEHICLE_PED_IS_USING(players.user_ped())
			yield()
		until not IS_PED_IN_ANY_VEHICLE(players.user_ped()) or curVehicle != vehicle
	end
end)

vehicles:toggle_loop("Vehicle Rockets", {"vehiclerockets"}, "Press Left Mouse to fire", function()
	local wpn = joaat("vehicle_weapon_tank")
	local vehicle = entities.get_user_vehicle_as_handle()
	local offset = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS
	local leftStart = offset(vehicle, -1.25, 0.5, 0.35)
	local leftEnd = offset(vehicle, -1.25, 100.0, 0.35)
	local rightStart = offset(vehicle, 1.25, 0.5, 0.35)
	local rightEnd = offset(vehicle, 1.25, 100.0, 0.35)
	if IS_PED_IN_ANY_VEHICLE(players.user_ped()) and not GET_IS_TASK_ACTIVE(players.user_ped(), 199) and IS_CONTROL_JUST_RELEASED(0, 69) and not IS_CONTROL_PRESSED(0, 68) then
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(leftStart, leftEnd, 0, true, wpn, players.user_ped(), true, false, 5.0)
		SHOOT_SINGLE_BULLET_BETWEEN_COORDS(rightStart, rightEnd, 0, true, wpn, players.user_ped(), true, false, 5.0)
	end
end)

vehicles:toggle_loop("Stun Lock", {}, "Mimics the ruiner 2000 stun lock for players trying to enter the vehicle when access is set to no-one.", function()
	for players.list_except(true) as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pPed =  entities.handle_to_pointer(ped)
		local pedPtr = entities.handle_to_pointer(players.user_ped())
		local vehicle = entities.get_user_vehicle_as_handle()
		local PersonalVehicle = DECOR_GET_INT(vehicle, "Player_Vehicle") != 0
		local boneCoords = GET_PED_BONE_COORDS(ped, 0xFCD9, v3())
		if GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle, playerID) and GET_VEHICLE_PED_IS_TRYING_TO_ENTER(ped) == vehicle and PersonalVehicle and IS_THIS_MODEL_A_CAR(GET_ENTITY_MODEL(vehicle)) then
			if HAS_ANIM_EVENT_FIRED(ped, -1526509349) then
				util.call_foreign_function(CWeaponDamageEventTrigger, pedPtr, pPed, boneCoords, 0, 1, joaat("weapon_stungun_mp"), 1.0, 0, 0, DF_IsAccurate | DF_IgnoreRemoteDistCheck, 0, 0, 0, 0, 0, 0, 0, 0.0)
				yield(1000)
			end
		end
	end
end)

local veh_jump = vehicles:list("Vehicle Jump")
local jumpForce = 25.00
veh_jump:slider_float("Power", {"jumpiness"}, "", 0, 10000, 2500, 100, function(value)
	jumpForce = value / 100
end)

veh_jump:toggle_loop("Enable", {"vehiclejump"}, "Press spacebar to jump.", function()
	local vehicle = entities.get_user_vehicle_as_handle()
	if vehicle != 0 and DOES_ENTITY_EXIST(vehicle) and IS_CONTROL_JUST_RELEASED(0, 102) then
		APPLY_FORCE_TO_ENTITY(vehicle, 1, 0.0, jumpForce/1.5, jumpForce, 0.0, 0.0, 0.0, 0, true, true, true, false, true)
		repeat
			yield()
		until not IS_ENTITY_IN_AIR(vehicle)
	end
end)

vehicles:toggle("Toggle Interior Light", {}, "", function(toggled)
	SET_VEHICLE_FORCE_INTERIORLIGHT(entities.get_user_vehicle_as_handle(), toggled)
end)

local deformation = 1.00
vehicles:slider_float("Deformation", {"deformation"}, "", -1000000, 1000000, 100, 100, function(value)
	deformation = value / 100
	menu.trigger_commands($"vhdeformationmult {deformation}")
end)

vehicles:toggle_loop("Auto Unlock Doors", {}, "", function()
	local vehicle = GET_VEHICLE_PED_IS_TRYING_TO_ENTER(players.user_ped())
	SET_VEHICLE_DOORS_LOCKED(vehicle,  1)
end)

vehicles:toggle_loop("Skip Hotwire", {}, "", function()
	local vehicle = GET_VEHICLE_PED_IS_TRYING_TO_ENTER(players.user_ped())
	SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(vehicle, false)
end)

vehicles:toggle_loop("Fast Enter/Exit", {"fastvehicleenter"}, "Enter vehicles faster.", function()
	if (GET_IS_TASK_ACTIVE(players.user_ped(), 160) or GET_IS_TASK_ACTIVE(players.user_ped(), 167) or GET_IS_TASK_ACTIVE(players.user_ped(), 165)) and not GET_IS_TASK_ACTIVE(players.user_ped(), 195) then
		FORCE_PED_AI_AND_ANIMATION_UPDATE(players.user_ped())
	end
end)

vehicles:toggle_loop("Disable Godmode On Exit", {}, "", function()
	local vehicle = entities.get_user_vehicle_as_handle()
	if entities.is_invulnerable(vehicle) then
		if not IS_PED_IN_ANY_VEHICLE(players.user_ped()) then
			SET_ENTITY_CAN_BE_DAMAGED(vehicle, true)
		end
	end
end)

vehicles:toggle_loop("Vehicle Rocket Aimbot", {"vehicleaimbotall"}, "", function()
	for players.list_except(true) as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pedDistance = v3.distance(players.get_position(players.user()), players.get_position(playerID))
		if not IS_PLAYER_DEAD(ped) and IS_CONTROL_PRESSED(0, 70) and pedDistance < 250.0 and not players.is_in_interior(playerID) and GET_VEHICLE_HOMING_LOCKON_STATE(entities.get_user_vehicle_as_handle()) == 0 then
			SET_VEHICLE_SHOOT_AT_TARGET(players.user_ped(), ped, players.get_position(playerID))
		end
	end
end)

local godmode_detection = false
modder_detections:toggle("Godmode", {}, "Detects if someone is using godmode.", function(toggled)
	godmode_detection = toggled
end)

local time_since_last_move = 0
util.create_tick_handler(function()
	if godmode_detection then
		local timer = util.current_time_millis() + 10000
		for players.list_except(true) as playerID do
			local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
			local pos = players.get_position(playerID)
			local vehicle = GET_VEHICLE_PED_IS_USING(ped)
			local zoneID = GET_ZONE_AT_COORDS(players.get_position(playerID))
			local isPlayerMoving = #NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK(GET_PLAYER_PED_SCRIPT_INDEX(playerID)) > 1.5
			if (zoneID == 1321 and (IS_ENTITY_IN_WATER(vehicle) or IS_ENTITY_IN_WATER(ped))) or players.is_using_rc_vehicle(playerID) or not isNetPlayerOk(players.user()) then 
				continue 
			end
			if isPlayerGodmode(playerID) and not isDetectionPresent(playerID, "Godmode") then
				repeat
					if not isPlayerMoving and time_since_last_move >= 8 or not players.exists(playerID) or not isPlayerGodmode(playerID) or not isFreemodeActive(playerID) or isPlayerInInterior(playerID) or pos.z < 0.0 then
						time_since_last_move = 0
						timer = util.current_time_millis() + 10000
						break
					end
					yield(1000)
					time_since_last_move = not isPlayerMoving ? time_since_last_move + 1 : 0
				until util.current_time_millis() > timer
				if util.current_time_millis() > timer and players.exists(playerID) and isFreemodeActive(playerID) then
					players.add_detection(playerID, "Godmode", TOAST_ALL, 100)
					timer = util.current_time_millis() + 10000
					break
				end
			end    
		end
	end
end)

util.create_tick_handler(function()
	if godmode_detection then
		for players.list_except(true) as playerID do
			local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
			local vehicle = GET_VEHICLE_PED_IS_IN(ped)
			if isPlayerGodmode(playerID) and players.is_visible(playerID) then
				draw_debug_text($"{players.get_name(playerID)} is in godmode")
			end
		end
	end
end)

modder_detections:toggle_loop("Vehicle Godmode", {}, "Detects if someone is using a vehicle that is in godmode.", function()
	if NETWORK_IS_ACTIVITY_SESSION() then return end
	for players.list_except(true) as playerID do
		if not isPlayerInAnyVehicle(playerID) then continue end
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pos = players.get_position(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		local driver = NETWORK_GET_PLAYER_INDEX_FROM_PED(GET_PED_IN_VEHICLE_SEAT(vehicle, -1))
		if not isPlayerInCutscene(playerID) and not isPlayerInInterior(playerID) and entities.is_invulnerable(vehicle) and not NETWORK_IS_PLAYER_FADING(playerID) and IS_ENTITY_VISIBLE(vehicle) and playerID == driver and pos.z > 0.0 then
			draw_debug_text($"{players.get_name(driver)} is in vehicle godmode")
		end
	end 
end)

local lastMoveShit = {}
local playerVisibility = {}
modder_detections:toggle_loop("Invisibility", {}, "", function()
	if not isNetPlayerOk(players.user()) then return end
	local timer = util.current_time_millis() + 10000
	for players.list_except(true) as playerID do
		lastMoveShit[playerID] = 0
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pos = players.get_position(playerID)
		local blipType = GET_BLIP_INFO_ID_TYPE(GET_BLIP_FROM_ENTITY(ped))
		local vehicle = GET_VEHICLE_PED_IS_IN(ped)
		local isPlayerMoving = #NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK(ped) > 1.5 or #NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK(vehicle) > 1.5
		if not isDetectionPresent(playerID, "Invisibility") then
			if not players.is_otr(playerID) and blipType == 0 and isNetPlayerOk(playerID, true, true) and not isPlayerInInterior(playerID) and not players.is_visible(playerID) and isPlayerMoving and pos.z > 0.0 then
				repeat
					lastMoveShit[playerID] = lastMoveShit[playerID] == nil ? 0 : lastMoveShit[playerID]
					if not isPlayerMoving and lastMoveShit[playerID] >= 8 or not isNetPlayerOk(playerID, true, true) or players.is_visible(playerID) or not isFreemodeActive(playerID) or isPlayerInInterior(playerID) or isPlayerInCutscene(playerID) or pos.z < 0.0 then
						lastMoveShit[playerID] = 0
						timer = util.current_time_millis() + 10000
						playerVisibility[playerID] = true
						break
					end
					if isDebugMode then
						toast($"Detecting {players.get_name(playerID)} for invisibility...")
					end
					yield(1000)
					lastMoveShit[playerID] = not isPlayerMoving ? lastMoveShit[playerID] + 1 : 0
				until util.current_time_millis() > timer
				if not playerVisibility[playerID] then
					players.add_detection(playerID, "Invisibility", TOAST_ALL, 100)
					lastMoveShit[playerID] = 0
					timer = util.current_time_millis() + 10000
				end
			end
		end
	end
	yield()
end)


modder_detections:toggle_loop("Super Drive", {}, "Detects if someone is using super drive or modded vehicle speed.", function()
	if NETWORK_IS_ACTIVITY_SESSION() then return end
	for players.list_except(true) as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		local vehSpeed = (GET_ENTITY_SPEED(vehicle)* 2.236936)
		local vehClass = GET_VEHICLE_CLASS(vehicle)
		local driver = NETWORK_GET_PLAYER_INDEX_FROM_PED(GET_PED_IN_VEHICLE_SEAT(vehicle, -1))
		local owner = entities.get_owner(vehicle)

		if vehClass != 15 and vehClass != 16 and vehSpeed >= 200 and playerID == driver and not GET_HAS_ROCKET_BOOST(vehicle) then
			if owner != driver then 
				repeat
					vehSpeed = (GET_ENTITY_SPEED(vehicle)* 2.236936)
					yield() -- cooldown incase they are launched by a modder
				until vehSpeed < 50
				return
			end
			if not isDetectionPresent(driver, "Super Drive") then
				players.add_detection(driver, "Super Drive", TOAST_ALL, 75)
				break
			end
		end
	end
	yield(250)
end)

modder_detections:toggle_loop("Orbital Cannon", {}, "Detects if someone is using a modded orbital cannon.", function()
	for players.list_except(true) as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		if isPlayerUsingOrbitalCannon(playerID) and getPlayerCurrentInterior(playerID) != 269313 and not isDetectionPresent(playerID, "Modded Orbital Cannon") and isNetPlayerOk(playerID) then
			players.add_detection(playerID, "Modded Orbital Cannon", TOAST_ALL, 100)
			break
		end
	end
	yield(250)
end)

modder_detections:toggle_loop("Spawned Vehicle", {}, "Detects if someone driving a spawned vehicle.", function()
	if NETWORK_IS_ACTIVITY_SESSION() then return end
	for players.list_except(true) as playerID do
		if not isPlayerInAnyVehicle(playerID) then continue end
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		local plateText = GET_VEHICLE_NUMBER_PLATE_TEXT(vehicle)
		local personalVehicle = DECOR_GET_INT(vehicle, "Player_Vehicle") != 0
		local pegasusveh = DECOR_GET_BOOL(vehicle, "CreatedByPegasus")
		local script = GET_ENTITY_SCRIPT(vehicle, 0)
		if not table.contains(scripts, script) and plateText != "46EEK572" then continue end

		if players.get_vehicle_model(playerID) ~= 0 and not GET_IS_TASK_ACTIVE(ped, 160) and isNetPlayerOk(players.user()) and players.exists(playerID) then
			local driver = NETWORK_GET_PLAYER_INDEX_FROM_PED(GET_PED_IN_VEHICLE_SEAT(vehicle, -1))
			if players.exists(driver) and not pegasusveh and playerID == driver and not personalVehicle then
				if isDebugMode and script != nil then
					draw_debug_text($"{players.get_name(driver)} is using a spawned vehicle [Model: {reverse_joaat(players.get_vehicle_model(playerID))}] Script: {script}")
				else
					draw_debug_text($"{players.get_name(driver)} is using a spawned vehicle [Model: {reverse_joaat(players.get_vehicle_model(playerID))}]")
				end
			end
		end
	end
end)

modder_detections:toggle_loop("Anti-Lockon", {}, "Detects players using anti-lockon.", function()
	local timer = util.current_time_millis() + 10000 -- compensating for player latency and vehicle chaff
	if NETWORK_IS_ACTIVITY_SESSION() then return end
	for players.list_except(true) as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		if vehicle == 0 then return end
		local driver = NETWORK_GET_PLAYER_INDEX_FROM_PED(GET_PED_IN_VEHICLE_SEAT(vehicle, -1))
		local bitset = DECOR_GET_INT(vehicle, "MPBitset")
		local vehicleMdl = reverse_joaat(players.get_vehicle_model(playerID))
		local legitBitsets = {2048, 3072, 10240, 11264, 11272, 33792} -- the game sets some vehicles not targetable that are parts of fm activities
		for legitBitsets as bitsets do
			if bitset == bitsets then
				return
			end
		end

		if not IS_PED_IN_ANY_VEHICLE(ped) or (not doesVehicleHaveImaniTech(vehicle) and GET_VEHICLE_MOD(vehicle, 44) == 1) then 
			continue 
		end

		local bAllowHomingMissileLockon = memory.read_byte(entities.handle_to_pointer(vehicle) + 0xAEE)
		if bAllowHomingMissileLockon == 0 and not isDetectionPresent(playerID, "Anti-Lockon") and playerID == driver then
			repeat
				if bAllowHomingMissileLockon == 1 then
					timer = util.current_time_millis() + 10000
					return
				end
				yield()
			until util.current_time_millis() > timer
			if bAllowHomingMissileLockon == 0 then
				players.add_detection(playerID, "Anti-Lockon", TOAST_ALL, 75)
				timer = util.current_time_millis() + 10000
				break
			end
		else
			timer = util.current_time_millis() + 10000
		end
	end
	yield(250)
end)

do
	local cachedModData = {}
	local cachedVehData = {}
	modder_detections:toggle_loop("Modded Vehicle Upgrade", {}, "Detects players who have modded their own or someone elses vehicles outside of a shop.", function(toggled)
		for players.list_except(true) as playerID do
			if not isPlayerInAnyVehicle(playerID) then
				if cachedModData[playerID] then
					cachedModData[playerID] = nil
				end
				continue
			end

			local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
			local pos = players.get_position(playerID)
			local vehicle = GET_VEHICLE_PED_IS_USING(ped)
			local driver = NETWORK_GET_PLAYER_INDEX_FROM_PED(GET_PED_IN_VEHICLE_SEAT(vehicle, -1))

			local current_vehicle_mods = {}
			if not cachedModData[playerID] then
				cachedModData[playerID] = { veh_mods = {} }
				for i = 0, 49 do
					cachedModData[playerID].veh_mods[i] = GET_VEHICLE_MOD(vehicle, i)
				end
				continue
			end

			if not cachedVehData[playerID] then
				cachedVehData[playerID] = GET_VEHICLE_PED_IS_USING(ped)
				continue
			end	

			local cachedData = cachedModData[playerID]
			local cachedVehicle = cachedVehData[playerID]

			local curVeh = GET_VEHICLE_PED_IS_USING(ped)
			local owner = entities.get_owner(curVeh)
			if curVeh == cachedVehicle then
				for i = 0, 49 do
					local mod = GET_VEHICLE_MOD(vehicle, i)
					if cachedData.veh_mods[i] ~= mod and owner == driver and not isPlayerInInterior(playerID) and pos.z > 0.0 and GET_VEHICLE_PED_IS_USING(ped) == vehicle and players.exists(playerID) then
						if not isDetectionPresent(entities.get_owner(vehicle), "Modded Vehicle Upgrade") then
							players.add_detection(entities.get_owner(vehicle), "Modded Vehicle Upgrade", TOAST_ALL, 100)
							yield(500)
							break
						end
					end
					cachedData.veh_mods[i] = mod
				end
			end
			cachedModData[playerID] = cachedData
			cachedVehData[playerID] = curVeh
		end
		yield(250)
	end)
	players.on_leave(function(playerID)
		cachedModData[playerID] = nil
		cachedVehData[playerID] = nil
	end)
end

modder_detections:toggle_loop("Damage Modifier", {}, "Detects menus with bad damage multiplier anti-detections that are not detected by stand.", function()
	local timer = util.current_time_millis() + 5000
	if NETWORK_IS_ACTIVITY_SESSION() then return end
	for players.list_except(true) as playerID do
		local pos = players.get_position(playerID)
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		if isNetPlayerOk(players.user()) and isNetPlayerOk(playerID, true, true) and not isPlayerInInterior(playerID) and getPlayerJobPoints(playerID) == 0 then
			if players.get_weapon_damage_modifier(playerID) == 1 then
				repeat
					if players.get_weapon_damage_modifier(playerID) != 1 or not players.exists(playerID) then
						timer = util.current_time_millis() + 5000
						break
					end
					yield()
				until util.current_time_millis() > timer
				if util.current_time_millis() > timer and not isDetectionPresent(playerID, "Damage Modifier") then
					yield(1000)
					players.add_detection(playerID, "Damage Modifier", TOAST_ALL, 100)
					timer = util.current_time_millis() + 5000
					break
				end
			end
		end
		if isDetectionPresent(playerID, "Damage Modifier") then
			if players.get_weapon_damage_modifier(playerID) != 1 then
				for menu.player_root(playerID):getChildren() as cmd do
					if cmd:getType() == COMMAND_LIST_CUSTOM_SPECIAL_MEANING then
						cmd:refByRelPath("Damage Modifier"):trigger() -- pop the detection in the case of a false positive. (occurs when freemode fails to reset their damage multiplier back to 0.71 on spawn)
					end
				end
			end
		end
	end
	yield(250)
end)

modder_detections:toggle_loop("2Take1 User", {}, "Detects people using 2Take1. (Note: player must be in a vehicle spawned by them)", function()
	for players.list_except() as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		local bitset = DECOR_GET_INT(vehicle, "MPBitset")
		local pegasusveh = DECOR_GET_BOOL(vehicle, "CreatedByPegasus")
		if isNetPlayerOk(playerID) and bitset == 1024 and players.get_weapon_damage_modifier(playerID) == 1 and not entities.is_invulnerable(ped) and not pegasusveh and getPlayerJobPoints(playerID) == 0 then
			if not isDetectionPresent(playerID, "2Take1 User") then
				players.add_detection(playerID, "2Take1 User", TOAST_ALL, 100)
				menu.trigger_commands($"historynote {players.get_name(playerID)} 2Take1 User")
				return
			end
		end
	end
	yield(250)
end)

modder_detections:toggle_loop("YimMenu User", {}, "Detects people using YimMenu's \"Force Session Host\". This will also detect menus that have skidded from YimMenu such as Ethereal.", function() -- checking silly hardcoded host token cus who tf manually sets theirs to this anyways
	for players.list() as playerID do
		if tonumber(players.get_host_token(playerID)) == 41 then
			if not isDetectionPresent(playerID, "YimMenu User") then
				players.add_detection(playerID, "YimMenu User", TOAST_ALL, 100)
				menu.trigger_commands($"historynote {players.get_name(playerID)} YimMenu User")
				return
			end
		end
	end
	yield(250)
end)

modder_detections:toggle_loop("Modded Spectate", {}, "Detects if someone is spectating you with a mod menu.", function()
	for players.list() as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		local cam_dist = v3.distance(players.get_position(players.user()), players.get_cam_pos(playerID))
		local pedDistance = v3.distance(players.get_position(players.user()), players.get_position(playerID))
		local spectateTarget = players.get_spectate_target(playerID)
		local driver = NETWORK_GET_PLAYER_INDEX_FROM_PED(GET_PED_IN_VEHICLE_SEAT(vehicle, -1))
		if isNetPlayerOk(playerID, true, true) and not isPlayerInInterior(playerID) then
			if IS_PED_IN_ANY_VEHICLE(ped) and driver == playerID then -- ignore players driving by quickly
				return
			end
			if cam_dist < 15.0 and pedDistance > 50.0 and not isPlayerSpectating(playerID) and spectateTarget == -1 and not isPlayerInCutscene(playerID) or spectateTarget == players.user()  then
				toast($"{players.get_name(playerID)} is spectating you")
				break
			end
		end
	end
end)

normal_detections:toggle_loop("Waypoint", {}, "Detects if someone places their waypoint on you.", function()
	local getEntitySpeed = GET_ENTITY_SPEED(players.user_ped()) * 2.236936
	local multiplyDistance = (getEntitySpeed - 20) / 20 * 0.1
	local entitySpeed = math.max(1.1 + multiplyDistance, 1.1)
	for players.list_except(true) as playerID do
        local x, y = players.get_waypoint(playerID)
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pos = players.get_position(players.user())
        if x == 0 and y == 0 then continue end
		local distance = (pos.x - x)^2 + (pos.y - y)^2
		local assumedDistance = (GET_ENTITY_SPEED(players.user_ped()) + 1)^entitySpeed
		if distance < assumedDistance then
			toast($"{players.get_name(playerID)} has an active waypoint on you")
		end
	end
end)

normal_detections:toggle_loop("SCTV Spectate", {}, "Detects if someone is spectating you via SCTV.", function()
	for players.list() as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local cam_dist = v3.distance(players.get_position(players.user()), players.get_cam_pos(playerID))
		local pedDistance = v3.distance(players.get_position(players.user()), players.get_position(playerID))
		if isPlayerSpectating(playerID) and players.get_spectate_target(playerID) == players.user() then
			toast($"{players.get_name(playerID)} is using spectating you [SCTV]")
			break
		end
	end
end)

normal_detections:toggle_loop("Orbital Cannon", {}, "Detects if someone is using an orbital cannon.", function()
	for players.list_except(true) as playerID do
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pos = players.get_position(players.user())
		local distance = v3.distance(pos, v3.setZ(players.get_cam_pos(playerID), pos.z))
		if isPlayerUsingOrbitalCannon(playerID) and GET_IS_TASK_ACTIVE(ped, 135) and getPlayerCurrentInterior(playerID) == 269313 then
			draw_debug_text($"{players.get_name(playerID)} is at the orbital cannon")
		end
		if isPlayerUsingOrbitalCannon(playerID) and GET_IS_TASK_ACTIVE(ped, 135) and distance < 25.0 and not isPlayerInInterior(players.user()) and getPlayerCurrentInterior(playerID) == 269313 then
			toast($"{players.get_name(playerID)} is targeting you with the orbital cannon")
		end
	end
end)

normal_detections:toggle_loop("Voice Chat", {}, "Detects who is talking in game chat.", function()
	for players.list_except() as playerID do
		if NETWORK_IS_PLAYER_TALKING(playerID) then
			draw_debug_text($"{players.get_name(playerID)} is talking")
		end
	end 
end)

normal_detections:toggle_loop("Bullshark Testosterone", {}, "Notifies you if a player has collected BST.", function()
	local data = memory.alloc(56 * 8)
	for queue = 0, 2 do
		for index = 0, GET_NUMBER_OF_EVENTS(queue) - 1 do
			local event = GET_EVENT_AT_INDEX(queue, index)
			if event == 174 then
				if not GET_EVENT_DATA(queue, index, data, 54) then 
					break 
				end
				if memory.read_int(data) == -584633745 then
					local playerID = memory.read_int(data + 1 * 8)
					toast($"{players.get_name(playerID)} has collected Bull Shark Testosterone.")
				end
			end
		end
	end
end)

local antibeast = protections:list("Anti-Beast", {}, "Prevent the Hunt The Beast activity for yourself and others")
antibeast:toggle("Myself", {}, "Prevents you from being turned into the beast.", function(toggled)
	menu.ref_by_path("Online>Protections>Disable Turning Into Beast").value = toggled
end)

antibeast:toggle_loop("Someone Else", {}, "Prevents other players from being turned into the beast.", function()
	if GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH(joaat("am_hunt_the_Beast")) > 0 then
		local beast = memory.read_int(memory.script_local("am_hunt_the_Beast", 608))
		local gameState = memory.script_local("am_hunt_the_Beast", 603)
		local amLauncherHost = NETWORK_GET_HOST_OF_SCRIPT("am_launcher", -1, 0)
		local huntTheBeastHost = NETWORK_GET_HOST_OF_SCRIPT("am_hunt_the_Beast", -1, 0)
		local timer = util.current_time_millis() + 5000
		if beast != players.user() and beast != -1 and memory.read_int(gameState) != 3 then
			toast($"Blocked a freemode activity (Hunt The Beast) Target: {players.get_name(beast)}, likely started by {players.get_name(amLauncherHost)}")
			if huntTheBeastHost != players.user() then
				memory.write_int(gameState, 3)
			end
		end
	end
end)

protections:toggle_loop("Block Gooch Event", {}, "Blocks the event that sends the gooch after you.", function()
	if GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH(joaat("fm_content_xmas_mugger")) > 0 then
		local amLauncherHost = NETWORK_GET_HOST_OF_SCRIPT("am_launcher", -1, 0)
		TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME("fm_content_xmas_mugger")
		toast($"Prevented a freemode script (fm_content_xmas_mugger). :D")
	end
end)

local anticage = protections:list("Anti-Cage", {}, "Blocks 99% of cages without breaking the game. Note: This will lead to a slight drop in performance.")
local cleanupType = 1
cleanupTypeSlider = anticage:slider("Cleanup Type", {"cleanuptype"}, "", 1, 2, 2, 1, function(index)
	cleanupType = index
end)
menu.add_value_replacement(cleanupTypeSlider, 1, "Delete")
menu.add_value_replacement(cleanupTypeSlider, 2, "Transparent")

local blockingradius = 5.00
anticage:slider_float("Blocking Radius", {"blockingradius"}, "The radius in which anti-cage will detect for cages.", 100, 2500, 500, 100, function(value)
	blockingradius = value/100
end)

anticage:toggle_loop("Enable Anti-Cage", {"anticage"}, "", function()
	if not isNetPlayerOk(players.user()) then return end
	local my_ents = {players.user_ped(), entities.get_user_vehicle_as_handle()}
	local interior = memory.read_int(memory.script_global(GlobalplayerBD + 1 + (players.user() * 463) + 245))
	if interior == 275201 or interior == 274689 or interior == 281089 then
		return
	end
	for entities.get_all_objects_as_pointers() as objPtr do
		local obj = entities.pointer_to_handle(objPtr)
		local script = GET_ENTITY_SCRIPT(obj, 0)
		local owner = entities.get_owner(obj)
		if owner == -1 or owner == players.user() then
			RELEASE_SCRIPT_GUID_FROM_ENTITY(obj)
			continue
		end
		SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE(obj)
		for doors as door do
			if GET_ENTITY_MODEL(obj) == joaat(door) then
				continue
			end
		end

		for my_ents as data do
			if owner != -1 and owner != players.user() and GET_ENTITY_MODEL(obj) != 0 then
				if v3.distance(players.get_position(players.user()), GET_ENTITY_COORDS(obj)) <= blockingradius or table.contains(scripts, script) then
					switch cleanupType do
						case 1:
							SET_ENTITY_NO_COLLISION_ENTITY(obj, data, false) 
							SET_ENTITY_ALPHA(obj, 0, false)
							entities.delete(obj)
							toast($"[Anti-Cage] Deleting an object...\nModel Name: {reverse_joaat(GET_ENTITY_MODEL(obj))}", TOAST_ALL)
							break
						case 2:
							SET_ENTITY_NO_COLLISION_ENTITY(obj, data, false)  
							SET_ENTITY_ALPHA(obj, 50, false)
							toast($"[Anti-Cage] Deleting an object...\nModel Name: {reverse_joaat(GET_ENTITY_MODEL(obj))}", TOAST_ALL)
							break
					end
					if IS_ENTITY_TOUCHING_ENTITY(players.user_ped(), obj) then
						toast($"[Anti-Cage] Blocked Cage from {players.get_name(owner)}")
					end
				end
			end
		end
		if memory.read_long(objPtr + 0xD0) != 0 then
			RELEASE_SCRIPT_GUID_FROM_ENTITY(obj)
		end
	end
end)

local anti_mugger = protections:list("Block Muggers", {}, "Prevent muggers for yourself and others")
anti_mugger:toggle_loop("Myself", {}, "Prevents you from being mugged.", function()
	if NETWORK_IS_SCRIPT_ACTIVE("am_gang_call", 0, true, 0) then
		local pedNetId = memory.read_int(memory.script_local("am_gang_call", 62 + 10 + 1))
		local sender = memory.read_int(memory.script_local("am_gang_call", 286))
		local target = memory.read_int(memory.script_local("am_gang_call", 287))

		util.spoof_script("am_gang_call", function()
			if sender != players.user() and target == players.user() 
			and NETWORK_DOES_NETWORK_ID_EXIST(pedNetId) 
			and NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(pedNetId) then
				local mugger = NET_TO_PED(pedNetId)
				entities.delete(mugger)
				toast($"Blocked mugger from {players.get_name(sender)}")
			end
		end)
	end
end)

anti_mugger:toggle_loop("Someone Else", {}, "Prevents others from being mugged.", function()
	if NETWORK_IS_SCRIPT_ACTIVE("am_gang_call", 0, true, 0) then
		local pedNetId = memory.script_local("am_gang_call", 63 + 10 + 1)
		local sender = memory.script_local("am_gang_call", 286)
		local target = memory.script_local("am_gang_call", 287)
		
		util.spoof_script("am_gang_call", function()
			if memory.read_int(target) != players.user() and memory.read_int(sender) != players.user()
			and NETWORK_DOES_NETWORK_ID_EXIST(memory.read_int(pedNetId)) 
			and NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(memory.read_int(pedNetId)) then
				local mugger = NET_TO_PED(memory.read_int(pedNetId))
				entities.delete(mugger)
				toast($"Blocked mugger sent by {players.get_name(memory.read_int(sender))} to {players.get_name(memory.read_int(target))}")
			end
		end)
	end
end)

protections:toggle_loop("Block Ped Hijack", {}, "Blocks people that try to ped hijack your vehicle.", function()
	local vehicle = entities.get_user_vehicle_as_handle()
	if not IS_PED_IN_VEHICLE(players.user_ped(), vehicle, false) then return end
	for entities.get_all_peds_as_handles() as ped do
		local targetVehicle = GET_VEHICLE_PED_IS_TRYING_TO_ENTER(ped)
		local targetSeat = GET_SEAT_PED_IS_TRYING_TO_ENTER(ped)
		local owner = entities.get_owner(ped)
		if targetVehicle == vehicle and targetSeat == (seat := getSeatPedIsIn(players.user_ped())) and not IS_PED_A_PLAYER(ped) and owner != players.user() then
			entities.delete(ped)
			repeat
				SET_PED_INTO_VEHICLE(players.user_ped(), vehicle, seat)
				yield()
			until getSeatPedIsIn(players.user_ped()) == seat
			toast($"Prevented a Vehicle Takeover (Ped Hijack), likely caused by {players.get_name(owner)}")
			if not isDetectionPresent(owner, "Vehicle Hijack") then
				players.add_detection(owner, "Vehicle Hijack", TOAST_ALL, 75)
				break
			end
		end
	end
end)

protections:toggle_loop("Block Modded Peds", {"blockmoddedpeds"}, "Blocks peds that aren't spawned legitimately which will protect you from quite a lot of stuff such as crashes and trolling features.", function()
	if not isNetPlayerOk(players.user()) or isPlayerInInterior(players.user()) then return end
	for entities.get_all_peds_as_handles() as ped do
		local script = GET_ENTITY_SCRIPT(ped, 0)
		local owner = entities.get_owner(ped)
		if table.contains(scripts, script) and owner != players.user() and owner != -1 and ped != randomPed and ped != glitchPed then
			entities.delete(ped)
			if isDebugMode then
				if GET_ENTITY_MODEL(ped) != 0 then
					toast($"[Debug Info] Modded Ped Deleted\nCreated By: {script}\nPed Model: {reverse_joaat(GET_ENTITY_MODEL(ped))}\nOwner: {players.get_name(owner)}")
				end
			end
		end
	end
end)

protections:toggle_loop("Block Modded Vehicles", {"blockmoddedvehicles"}, "Blocks vehicles that aren't spawned legitimately which will protect you from quite a lot of stuff such as trolling features.", function()
	if not isNetPlayerOk(players.user()) then return end
	for entities.get_all_vehicles_as_handles() as vehicle do
		local script = GET_ENTITY_SCRIPT(vehicle, 0)
		local owner = entities.get_owner(vehicle)
		local bitset = DECOR_GET_INT(vehicle, "MPBitset")
		local driver = GET_PED_IN_VEHICLE_SEAT(vehicle, -1)
		local driverPlayerID = NETWORK_GET_PLAYER_INDEX_FROM_PED(driver)
		if IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(driverPlayerID) then 
			continue
		end
		if table.contains(scripts, script) and (driver == 0 or not IS_PED_A_PLAYER(driver)) and owner != players.user() and owner != -1 then
			entities.delete(vehicle)
			if isDebugMode then
				if GET_ENTITY_MODEL(vehicle) != 0 then
					toast($"[Debug Info] Modded Vehicle Deleted\nCreated By: {script}\nVehicle Model: {reverse_joaat(GET_ENTITY_MODEL(vehicle))}\nOwner: {players.get_name(owner)}")
				end
			end
		end
		yield()
	end
end)

local epicBall = funfeatures:list("Transform Into Ball")

local settings = {
    ballSpeed = 0.5,
    ballSprintMult = 2.5,
    inAirBallSprintMult = 5.0,
    minDistance = 10.0,
    bounceStrength = 3.0,
    dropVelocity = 1.5,
    snappingForce = 0.5,
    ballFov = 70,
    ballHash = joaat("stt_prop_stunt_soccer_sball"),
    ballVisibility = 0,
    pedVisibility = 0
}

local setFov = menu.ref_by_path("Game>Camera>Field of View>Third-Person, On Foot"),
local cachedFov = menu.get_value(setFov)

local ballToggle
ballToggle = epicBall:toggle_loop("Transform", {"ball"}, "Note: This will cause teleport to not work, toggle levitation to use teleport.", function(toggled)
	local ballMdl = settings.ballHash
	util.request_model(ballMdl)

	if IS_PED_IN_ANY_VEHICLE(players.user_ped()) then
		if ballObj != nil then
			entities.delete(ballObj)
		end
		ballToggle.value = false
		util.stop_thread()
	end
	
	if ballObj == nil or not DOES_ENTITY_EXIST(ballObj) and not levitation.value then
		ballObj = entities.create_object(ballMdl, players.get_position(players.user()))
		pedRot = GET_ENTITY_ROTATION(players.user_ped(), 2)
		ATTACH_ENTITY_TO_ENTITY(players.user_ped(), ballObj, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, false, false, false, false, 0, true, false)
	end

	if settings.ballVisibility == 1 and settings.pedVisibility == 0 and not players.is_visible(players.user()) then -- to prevent player ped from going invisible when toggling ball visibility to invisible
		SET_ENTITY_VISIBLE(players.user_ped(), true)
	end

	if not isNetPlayerOk(players.user(), true, true) or GET_ENTITY_MODEL(ballObj) != settings.ballHash or not IS_ENTITY_ATTACHED_TO_ENTITY(players.user_ped(), ballObj) or (levitation.value and ballObj != nil) then
		entities.delete(ballObj)
		return
	end

	CLEAR_PED_TASKS_IMMEDIATELY(players.user_ped())
	SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE(ballObj)
	SET_ENTITY_VISIBLE(ballObj, settings.ballVisibility == 0 ? true : false)
	setFov:trigger(settings.ballFov)
	invisibility:setState(settings.pedVisibility == 1 ? (not levitation.value ? "Enabled" : (levitation.value and stealthLevitation ? "Locally Visible" : "Disabled")) : "Disabled")

    local inputDirection = -GET_CONTROL_NORMAL(2, 31)
    local inputSide = GET_CONTROL_NORMAL(2, 30)
    
    local camRot = GET_GAMEPLAY_CAM_ROT(2)
    local camHeadingDirection = -camRot.z / 180 * math.pi
    local camHeadingSide = camHeadingDirection + math.pi / 2

    local moveDirection = v3(math.sin(camHeadingDirection), math.cos(camHeadingDirection), 0) -- thanks to aaron for doing all this god awful math for me <3
    local moveSide = v3(math.sin(camHeadingSide), math.cos(camHeadingSide), 0)
	local moveAltitude = IS_CONTROL_PRESSED(0, 102) ? settings.bounceStrength : (IS_CONTROL_PRESSED(0, 36) ? -settings.dropVelocity : 0.0)
	local height = GET_ENTITY_HEIGHT_ABOVE_GROUND(ballObj)
	local force = height < settings.minDistance and IS_CONTROL_PRESSED(0, 21) ? (settings.ballSpeed * settings.ballSprintMult) : height > settings.minDistance and IS_CONTROL_PRESSED(0, 21) ? (settings.ballSpeed * settings.inAirBallSprintMult) : inputDirection

	moveDirection:mul(force)
	moveSide:mul(inputSide)
	moveDirection:add(moveSide)
	moveDirection:mul(settings.ballSpeed)
	
	if height > 3.0 then
		moveDirection.z = -settings.snappingForce
		APPLY_FORCE_TO_ENTITY(ballObj, 3, moveDirection, 0, 0, 0, 0, false, false, true, false, true)
	end

	moveDirection.z = moveAltitude
	APPLY_FORCE_TO_ENTITY(ballObj, 3, moveDirection, 0, 0, 0, 0, false, false, true, false, true)
end, function()
	if ballObj != nil then
		entities.delete(ballObj)
	end
	if pedRot != nil then
		SET_ENTITY_ROTATION(players.user_ped(), pedRot, 2)
	end
	CLEAR_PED_TASKS_IMMEDIATELY(players.user_ped())
	SET_ENTITY_VISIBLE(players.user_ped(), true)
	setFov:trigger(cachedFov)
	invisibility:setState("Disabled")
end)

epicBall:list_select("Model", {"ballmodel"}, "", deezBalls, deezBalls[1][1], function(mdlHash)
	settings.ballHash = mdlHash
end)

epicBall:divider("On Ground Movement")
epicBall:slider_float("Movement Speed", {"movementspeed"}, "", 10, 1000, 50, 10, function(value)
	settings.ballSpeed = value/100
end)

epicBall:slider_float("Sprint Multiplier", {"sprintmultiplier"}, "", 100, 10000, 250, 10, function(value)
	settings.ballSprintMult = value/100
end)

epicBall:divider("In Air Movement")
epicBall:slider_float("Distance From Ground", {"mindistance"}, "The minimum distance from the ground in which the sprint multiplier will be activated.", 100, 10000, 1000, 10, function(value)
	settings.minDistance = value/100
end)

epicBall:slider_float("Sprint Multiplier", {"airsprintmultiplier"}, "Usage: Left Shift on keyboard & A on controller", 100, 10000, 500, 10, function(value)
	settings.inAirBallSprintMult = value/100
end)

epicBall:divider("Assistant")
epicBall:slider_float("Upward Force", {"upwardforce"}, "Controls how high the ball can bounce.\nUsage: Spacebar on keyboard & RB on Controller.", 100, 1000, 300, 10, function(value)
	settings.bounceStrength = value/100
end)

epicBall:slider_float("Downward Force", {"downwardforce"}, "Controls how fast the ball will drop.\nUsage: Left Control on keyboard & Left Thumbstick on controller.", 100, 1000, 150, 10, function(value)
	settings.dropVelocity = value/100
end)


epicBall:slider_float("Snapping", {"snappingforce"}, "", 0, 250, 50, 10, function(value)
	settings.snappingForce = value/100
end)


epicBall:divider("Visibility")
epicBall:slider("Field Of View", {"ballfov"}, "", 50, 130, 70, 1, function(value)
	settings.ballFov = value
end)

epicBall:toggle_loop("Disable Camera Shake", {}, "", function()
	STOP_GAMEPLAY_CAM_SHAKING(true)
end)

ballVisibilitySlider = epicBall:slider("Ball Visibility", {"ballinvisibility"}, "", 0, 1, 0, 1, function(value) -- I dont like list selects for stuff like this, cry about it.
	settings.ballVisibility = value
end)
menu.add_value_replacement(ballVisibilitySlider, 0, "Visible")
menu.add_value_replacement(ballVisibilitySlider, 1, "Invisible")

pedVisibilitySlider = epicBall:slider("Ped Visibility", {"pedinvisibility"}, "Note: This will make you invisible on the radar for others.", 0, 1, 0, 1, function(value) -- cry about it more
	settings.pedVisibility = value
end)
menu.add_value_replacement(pedVisibilitySlider, 0, "Visible")
menu.add_value_replacement(pedVisibilitySlider, 1, "Invisible")


local ninjaJump = funfeatures:list("Ninja Jump")
local flipsPerSecond = 1.0
flipsPerSecondSlider = ninjaJump:slider_float("Flips Per Second", {"flipspeed"}, "", 0, 10000, 100, 10, function(value)
	flipsPerSecond = value/100
end)

local direction = 1
ninjaJumpSlider = ninjaJump:slider("Flip Direction", {"flipdirection"}, "", 1, 2, 1, 2, function(value) -- boo hoo
	direction = value
end)
menu.add_value_replacement(ninjaJumpSlider, 1, "Front Flip")
menu.add_value_replacement(ninjaJumpSlider, 2, "Back Flip")

local flips = 2
numberOfFlipsSlider = ninjaJump:slider("Number Of Flips", {"flipamount"}, "", 0, 1000, 2, 1, function(value)
	flips = value
end)
menu.add_value_replacement(numberOfFlipsSlider, 0, "No-Limit")

local clearTasks = false
ninjaJump:toggle("Clear Ped Tasks After Flips", {}, "Allows for you to freefall or skydive when your flips are done if jumping from a high place.", function(toggled)
	clearTasks = toggled
end)

local airControl = false
ninjaJump:toggle("Allow In-Air Control", {"ninjacontrol"}, "Allows for you to manuever your ped while ninja jumping.", function(toggled)
	airControl = toggled
end)


ninjaJumpTgl = ninjaJump:toggle_loop("Ninja Jump", {"ninjajump"}, "Note: Other players do not see this.", function()
	if not superJump.value then
		superJump.value = true
	end
	if IS_PED_JUMPING(players.user_ped()) and GET_ENTITY_HEIGHT_ABOVE_GROUND(players.user_ped()) > 2.0 then
		local cachedGracefulLanding = gracefulLanding.value
		local heading = GET_ENTITY_HEADING(players.user_ped())
		local pitch = 0
		local numOfFlips = (flips == 0) ? math.huge : flips
		local countedFlips = 0
		repeat
			if airControl then
				heading = GET_ENTITY_HEADING(players.user_ped())
			end
			pitch += 360 * TIMESTEP() * flipsPerSecond
			while pitch > 360 do
				pitch -= 360
				countedFlips += 1
			end
			SET_ENTITY_ROTATION(players.user_ped(), pitch * (direction == 1 ? -1 : 1), 0.0, heading, 2, true)
			yield()
		until not IS_PED_JUMPING(players.user_ped()) or countedFlips >= numOfFlips or levitation.value or not ninjaJumpTgl.value
		if levitation.value then
			CLEAR_PED_TASKS_IMMEDIATELY(players.user_ped())
		end
		if clearTasks then
			if not cachedGracefulLanding then
				gracefulLanding.value = true
			end
			GIVE_DELAYED_WEAPON_TO_PED(players.user_ped(), joaat("gadget_parachute"), 1, false)
			CLEAR_PED_TASKS(players.user_ped())
			yield()
			yield()
			while GET_IS_TASK_ACTIVE(players.user_ped(), 6) or IS_ENTITY_IN_AIR(players.user_ped()) do
				yield()
			end
			gracefulLanding.value = cachedGracefulLanding
		else
			repeat
				yield()
			until not IS_PED_JUMPING(players.user_ped())
		end
	end
end, function()
	SET_ENTITY_ROTATION(players.user_ped(), 0.0, 0.0, GET_ENTITY_HEADING(players.user_ped()), 2, true)
	superJump.value = false
end)


local movementType = funfeatures:list("Movement Type")
movementType:toggle_loop("Crawl", {"crawl"}, "Note: going in first person makes you go fast and its pretty funny.", function(toggled)
	requestAnimDict("missfbi3_sniping")
	local dict = "move_crawl"
	local forwards = "onfront_fwd"
	local backwards = "onfront_bwd"
	requestAnimDict(dict)
	if IS_CONTROL_PRESSED(0, 32) and not IS_ENTITY_PLAYING_ANIM(players.user_ped(), dict, forwards, 3) then
		TASK_PLAY_ANIM(players.user_ped(), dict, forwards, 2.5, 2.5, -1, 1|32, 1.0, false, false, false)
	elseif IS_CONTROL_PRESSED(0, 33) and not IS_ENTITY_PLAYING_ANIM(players.user_ped(), dict, backwards, 3) then
		TASK_PLAY_ANIM(players.user_ped(), dict, backwards, 2.5, 2.5, -1, 1|32, 1.0, false, false, false)
	elseif IS_PED_ARMED(players.user_ped(), 6) and not IS_ENTITY_PLAYING_ANIM(players.user_ped(), "missfbi3_sniping", "prone_michael", 3) and not IS_CONTROL_PRESSED(0, 32) and not IS_CONTROL_PRESSED(0, 33) then
		TASK_PLAY_ANIM(players.user_ped(), "missfbi3_sniping", "prone_michael", 2.5, 2.5, -1, 1|32, 1.0, false, false, false)
	end
end, function()
	CLEAR_PED_TASKS(players.user_ped())
end)

movementType:toggle_loop("Naruto", {"naruto"}, "", function()
	local dict = "swimming@scuba"
	local name = "dive_glide"
	requestAnimDict(dict)
	if IS_PED_SPRINTING(players.user_ped()) and not IS_ENTITY_PLAYING_ANIM(players.user_ped(), dict, name, 3) and not GET_IS_TASK_ACTIVE(players.user_ped(), 56) and not GET_IS_TASK_ACTIVE(players.user_ped(), 290) then
		TASK_PLAY_ANIM(players.user_ped(), dict, name, 5.0, 2.5, -1, 1|16|32, 1.0, false, false, false)
	elseif IS_ENTITY_PLAYING_ANIM(players.user_ped(), dict, name, 3) and (IS_PED_WALKING(players.user_ped()) or IS_PED_STILL(players.user_ped()) or IS_PED_FALLING(players.user_ped())
	or IS_PED_SWITCHING_WEAPON(players.user_ped()) or IS_PLAYER_FREE_AIMING(players.user()) or IS_PED_RELOADING(players.user_ped()) or IS_PED_JUMPING(players.user_ped())) then
		STOP_ANIM_TASK(players.user_ped(), dict, name, -3.0)
	end
end, function()
	CLEAR_PED_TASKS(players.user_ped())
end)

local animClipsets = {
    {"Bigfoot", "move_characters@orleans@core@"},
    {"Alien", "move_m@alien"},
    {"Juggernaut", "ANIM_GROUP_MOVE_BALLISTIC"},
}

for animClipsets as data do
    local animName = data[1]
    local clipset = data[2]
    movementType:toggle(animName, {}, "", function(toggled)
        if toggled then
            requestClipset(clipset)
            SET_PED_MOVEMENT_CLIPSET(players.user_ped(), clipset, 0.5)
        else
            REMOVE_CLIP_SET(clipset)
            RESET_PED_MOVEMENT_CLIPSET(players.user_ped(), 0.5)
        end
    end)
end

local superHit = funfeatures:list("Super Hit")
local strength = 1000.0
superHit:slider_float("Hit Strength", {"hitstrength"}, "", 1000, 10000000, 100000, 1000, function(value)
	strength = value/100
end)

superHit:toggle_loop("Super Hit", {}, "", function(toggled)
    SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(players.user(), strength, true)
end, function()
	SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(players.user(), 1.0, true)
end)

local fireBreath = funfeatures:list("Fire Breath")
local faceOffset = 0.15
fireBreath:slider_float("Face Offset", {"offsetface"}, "", 0, 50, 15, 1, function(value)
	faceOffset = value/100
end)

local fireScale = 0.5
fireBreath:slider_float("Fire Scale", {"offsetfire"}, "", 0, 100, 50, 1, function(value)
	fireScale = value/100
end)

fireBreath:toggle_loop("Enable", {}, "Usage: E on keyboard & RB on controller.", function() 
	local ped = GET_PLAYER_PED_SCRIPT_INDEX(players.user())
	REQUEST_NAMED_PTFX_ASSET("veh_xs_vehicle_mods")
	USE_PARTICLE_FX_ASSET("veh_xs_vehicle_mods")
	if IS_PED_IN_ANY_VEHICLE(players.user_ped()) then return end
	if IS_CONTROL_PRESSED(0, 206) then
		if ptfx == nil or not DOES_PARTICLE_FX_LOOPED_EXIST(ptfx) then
			ptfx = START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE("veh_nitrous", ped, -0.01, faceOffset, 0.0, 0.0, 0.0, 180.0, GET_PED_BONE_INDEX(ped, 31086), fireScale, false, false, false, 0, 0, 0, 255)
		end
	else
		if ptfx != nil then
			REMOVE_PARTICLE_FX(ptfx)
		end
	end
end, function()
	if ptfx != nil then
		REMOVE_PARTICLE_FX(ptfx)
		REMOVE_NAMED_PTFX_ASSET("veh_xs_vehicle_mods")
	end
end)

funfeatures:action("Lochness Monster Mk2", {}, "", function()
	local oppressor = joaat("oppressor2")
	local monster = joaat("h4_prop_h4_loch_monster")
	local pos = players.get_position(players.user())
	util.request_model(monster)
	util.request_model(oppressor)
	obj = entities.create_object(monster, pos)
	veh = entities.create_vehicle(oppressor, pos, 0)
	entities.set_can_migrate(obj, false)
	SET_ENTITY_COLLISION(obj, false, false)
	SET_PED_INTO_VEHICLE(players.user_ped(), veh, -1)
	ATTACH_ENTITY_TO_ENTITY(obj, veh, 0, -0.25, -1.0, 1.0, 0.0, 0.0, -90.0, true, false, false, false, 0, true, false)
end)


funfeatures:action("Broomstick Mk2", {}, "Note: You will be invisible for other players.", function()
	local revealInvisiblePlayers = menu.ref_by_path("Online>Reveal Invisible Players")
	local oppressor = joaat("oppressor2")
	local broomstick = joaat("prop_tool_broom")
	if revealInvisiblePlayers.value then
		toast("Please disable reveal invisible players.")
		return 
	end
	local pos = players.get_position(players.user())
	util.request_model(broomstick)
	util.request_model(oppressor)
	obj = entities.create_object(broomstick, pos)
	veh = entities.create_vehicle(oppressor, pos, 0)
	SET_ENTITY_VISIBLE(veh, false)
	SET_PED_INTO_VEHICLE(players.user_ped(), veh, -1)
	ATTACH_ENTITY_TO_ENTITY(obj, veh, 0, 0.0, 0.0, 0.3, -80.0, 0.0, 0.0, false, false, false, false, 0, true, false) -- thanks to chaos mod for doing the annoying rotation work for me :P
end)

local headlamp = funfeatures:list("Headlamp", {}, "Does not network with other players.")
local headlampDistance = 25.0
headlamp:slider_float("Distance", {"distance"}, "Distance that it will light up.", 100, 100000, 1500, 100, function(value)
	headlampDistance = value / 100
end)

local brightness = 10.0
headlamp:slider_float("Brightness", {"brightness"}, "Brightness of the light.", 100, 10000, 1000, 100, function(value)
	brightness = value / 100
end)

local light_radius = 15.0
headlamp:slider_float("Radius", {"radius"}, "Higher values will broaden the beam.", 100, 5000, 2000, 100, function(value)
	light_radius = value / 100
end)

local headlampColor = {r = 1, g = 235/255, b = 190/255, a = 0}
headlamp:colour("Color", {"headlampcolor"}, "Click to select a color.", headlampColor, true, function(value)
	headlampColor = value 
end)

headlamp:toggle_loop("Headlamp", {"headlamp"}, "", function()
	local head_pos = GET_PED_BONE_COORDS(players.user_ped(), 31086, 0.0, 1.0, 0.0)
	local camRot = players.get_cam_rot(players.user())
	if not IS_PED_IN_ANY_VEHICLE(players.user_ped()) then
		DRAW_SHADOWED_SPOT_LIGHT(head_pos, camRot:toDir(), math.floor(headlampColor.r * 255), math.floor(headlampColor.g * 255), math.floor(headlampColor.b * 255), headlampDistance * 1.5, brightness, 0.0, light_radius, headlampDistance, 0)
	end
end)

funfeatures:toggle("Power Outage", {"poweroutage"}, "", function(toggled)
	SET_ARTIFICIAL_LIGHTS_STATE(toggled)
end)

funfeatures:toggle("Blackout", {"enableblackout"}, "", function(toggled)
	menu.trigger_commands(toggled ? "time 0" : "syncclock")
	SET_ARTIFICIAL_LIGHTS_STATE(toggled)
	SET_TIMECYCLE_MODIFIER(toggled ? "dlc_island_vault" : "DEFAULT")
end)

local fingerGun = funfeatures:list("Finger Gun", {}, "Shoot bullets from your finger. (Note: will not do damage to players)")
for id, data in weapon_stuff do
	local name = data[1]
	local weaponName = data[2]
	fingerGun:toggle_loop(name, {}, "", function( )
		if memory.read_int(memory.script_global(4521801 + 930)) == 3 then
			memory.write_int(memory.script_global(4521801 + 935), GET_NETWORK_TIME())
			local finalCoords = GET_FINAL_RENDERED_CAM_ROT(2):toDir():mul(1000):add(players.get_cam_pos(players.user()))
			local fingerPos = GET_PED_BONE_COORDS(players.user_ped(), 4089, 0.4, 0.0, -0.15)
			SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY(fingerPos, finalCoords, 1, true, joaat(weaponName), 0, true, false, 500.0, players.user_ped(), 0)
			yield(100)
		end
	end, function()
		local pos = players.get_position(players.user())
		CLEAR_AREA_OF_PROJECTILES(pos, 999999.0, 0)
	end)
end

local petJinx = funfeatures:list("Pet Jinx")
petJinx:toggle("Pet Jinx", {}, "", function(toggled)
	if toggled then
		local jinx = joaat("a_c_cat_01")
		util.request_model(jinx)
		local pos = players.get_position(players.user())
		jinxPed = entities.create_ped(28, jinx, pos, 0)
		entities.set_can_migrate(jinxPed, false)
		SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(jinxPed, true)
		SET_PED_COMPONENT_VARIATION(jinxPed, 0, 0, 1, 0)
		SET_ENTITY_INVINCIBLE(jinxPed, true)
		TASK_FOLLOW_TO_OFFSET_OF_ENTITY(jinxPed, players.user_ped(), 0, -0.3, 0, 10.0, -1, 100.0, true)
	else
		entities.delete(jinxPed)
	end
end)

petJinx:action("Find Jinx", {}, "", function()
	local pos = players.get_position(players.user())
	if jinxPed != nil then 
		SET_ENTITY_COORDS_NO_OFFSET(jinxPed, pos, false, false, false)
	else
		toast("Jinx Wasn't Found. :(")
	end
end)

misc:hyperlink("Join The Discord", "https://discord.gg/hjs5S93kQv", "Join the discord to get news on all the latest and upcoming updates.")
local jinxCredits = credits:list("Jinx", {}, "The reason it's named JinxScript.")
jinxCredits:hyperlink("Tiktok", "https://www.tiktok.com/@bigfootjinx")
jinxCredits:hyperlink("Twitter", "https://twitter.com/bigfootjinx")
jinxCredits:hyperlink("Instagram", "https://www.instagram.com/bigfootjinx")
jinxCredits:hyperlink("Youtube", "https://www.youtube.com/channel/UC-nkxad5MRDuyz7xstc-wHQ?sub_confirmation=1")
credits:action("Sapphire", {}, "dealing with all my autism and helping a ton throughout the development of the script by spoonfeeding me a bunch of stuff.", function() end)
credits:action("aaronlink127", {}, "helping me with a bunch of stuff I didn't quit understand yet and dealing with my shit.", function() end)
credits:action("well in that case", {}, "for making my life so much easier by making Pluto", function() end)
credits:action("Scriptcat", {}, "being there since I started and kept forcing me to start learning stands api and natives.", function() end)
credits:action("Pedro9558", {}, "Contributed some stuff he made to be put into the script.", function() end)
credits:action("ICYPhoenix", {}, "I would have never made this script or thought of making this script if he didn't change my role in the stand discord to \"OP Jinx Lua\".", function() end)
credits:action("Drifter", {}, "buying me the domain jinxscript.dev <3.", function() end)

misc:toggle("Debug Mode", {"debugmode"}, "Enables extra information as to why a feature didn't work as intended or debug notifications.", function(toggled)
	isDebugMode = toggled
end)
menu.apply_command_states()

local function player(playerID) 
	local name = players.get_name(playerID)
	if playerID != players.user() and (name == "Prizuhm" or name == "Iinustechtips" or name == "nullsub") then
		players.add_detection(playerID, "JinxScript Developer", TOAST_ALL, 1)
	end

	if not menu.player_root(playerID):isValid() then return end
	local main = menu.list(menu.player_root(playerID), "JinxScript", {"JinxScript"}, "")

	friendly = main:list("Friendly", {}, "")
	griefing = main:list("Trolling & Griefing", {}, "")
	antigodmode = main:list("Anti-Godmode", {}, "")
	tpPlayer = main:list("Teleport Player")
	miscPlayer = main:list("Miscellaneous")
	trollingRoot = menu.ref_by_rel_path(menu.player_root(playerID), "Trolling")
	trollingRoot:getChildren()[1]:attachBefore(trollingRoot:link(main):detach())

	friendly:toggle_loop("Pet Jinx", {}, "", function()
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		if not petJinxPlyr or not DOES_ENTITY_EXIST(petJinxPlyr) then
			local jinx = joaat("a_c_cat_01")
			util.request_model(jinx)
			local pos = players.get_position(playerID)
			petJinxPlyr = entities.create_ped(28, jinx, pos, 0)
			entities.set_can_migrate(petJinxPlyr, false)
			SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(petJinxPlyr, true)
			SET_PED_COMPONENT_VARIATION(petJinxPlyr, 0, 0, 1, 0)
			SET_ENTITY_INVINCIBLE(petJinxPlyr, true)
			TASK_FOLLOW_TO_OFFSET_OF_ENTITY(petJinxPlyr, ped, 0, -0.3, 0, 7.0, -1, 1.5, true)
		end
	end, function()
		entities.delete(petJinxPlyr)
	end)
  
	friendly:toggle_loop("Give Vehicle Rockets", {}, "Honk to shoot rockets.", function()
		local wpn = joaat("vehicle_weapon_tank")
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)

		local leftStart = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(vehicle, -1.25, 0.5, 0.35)
		local leftEnd = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(vehicle, -1.25, 100.0, 0.35)
		local rightStart = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(vehicle, 1.25, 0.5, 0.35)
		local rightEnd = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(vehicle, 1.25, 100.0, 0.35)
		if not GET_IS_TASK_ACTIVE(ped, 199) and IS_PLAYER_PRESSING_HORN(playerID) then
			SHOOT_SINGLE_BULLET_BETWEEN_COORDS(leftStart, leftEnd, 0, true, wpn, 0, true, false, 5.0)
			SHOOT_SINGLE_BULLET_BETWEEN_COORDS(rightStart, rightEnd, 0, true, wpn, 0, true, false, 5.0)
			repeat
				yield()
			until not IS_PLAYER_PRESSING_HORN(playerID)
		end
	end)

	friendly:action("Give Drift Tires", {"drifttires"}, "", function()
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		entities.request_control(vehicle, 2500)
		SET_DRIFT_TYRES(vehicle, true)
	end)

	friendly:toggle_loop("Autofill Rocket Boost", {}, "", function()
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		if IS_ROCKET_BOOST_ACTIVE(vehicle) then
			repeat
				yield()
			until not IS_ROCKET_BOOST_ACTIVE(vehicle)
			NETWORK_REQUEST_CONTROL_OF_ENTITY(vehicle)
			SET_ROCKET_BOOST_FILL(vehicle, 100.0)
		end
	end)

	local boostVehFriendly
	boostVehFriendly = friendly:toggle_loop("Horn Boost", {"hornboost"}, "", function() -- the only functional method that works everytime, applying force doesnt sync well since it requires entity control
		local speedUpMdl = joaat("stt_prop_track_speedup")
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)

		if not IS_PED_IN_ANY_VEHICLE(ped) then
			toast(lang.get_localised(PLYNVEH):gsub("{}", players.get_name(playerID)))
			boostVehFriendly.value = false
			util.stop_thread()
		end

		util.request_model(speedUpMdl)
		if IS_PLAYER_PRESSING_HORN(playerID) then
			local boostpad = entities.create_object(speedUpMdl, GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(vehicle, 0.0, GET_ENTITY_SPEED(vehicle)/2, -3.0), false, false, false)
			SET_ENTITY_VISIBLE(boostpad, false)
			SET_OBJECT_SPEED_BOOST_AMOUNT(boostpad, 100)
			entities.set_can_migrate(boostpad, false)
			yield(500)
			entities.delete(boostpad)
		end
	end)

	local rp_loop_ply = friendly:list("RP Loop")
	local levelPly = 120
	rp_loop_ply:slider("Stop At Level...", {"maxlevel"}, "", 1, 8000, 120, 1, function(val)
		levelPly = val
	end)

	local delayPly = 0
	rp_loop_ply:slider("Loop Delay", {"loopdelay"}, "", 0, 2500, 0, 10, function(val)
		delayPly = val
	end)

	local rpLoopPlyr
	rpLoopPlyr = rp_loop_ply:toggle_loop("Enable Loop", {"rploop"}, $"Enables RP Loop on {players.get_name(playerID)}", function()
		if not menu.player_root(playerID):isValid() then return end
		local giveRP = menu.ref_by_rel_path(menu.player_root(playerID), "Friendly>Give RP")
		if players.get_rank(playerID) >= levelPly then 
			toast($"{players.get_name(playerID)} is already at or above level {levelPly}. :)")
			rpLoopPlyr.value = false
			return 
		end
		repeat
			for i = 21, 24 do
				if players.get_rank(playerID) >= levelPly then break end
				util.trigger_script_event(1 << playerID, {968269233, players.user(), 4, i, 1, 1, 1})
				util.trigger_script_event(1 << playerID, {968269233, players.user(), 8, -1, 1, 1, 1})
				giveRP:trigger()
				if delayPly > 0 then
					yield(delayPly)
				end
			end
			yield()
		until players.get_rank(playerID) >= levelPly or not rpLoopPlyr.value
		if players.get_rank(playerID) >= levelPly then 
			toast($"{players.get_name(playerID)} is now at level {levelPly}. :)")
			rpLoopPlyr.value = false
			yield()
			yield()
			return 
		end
	end)

	local glitchPlyrRoot = griefing:list("Glitch Player")
	local glitchObjMdl = joaat("prop_ld_ferris_wheel")
	glitchPlyrRoot:list_select("Object", {"glitchplayerobj"}, "", object_stuff, object_stuff[1][1], function(mdlHash)
		glitchObjMdl = mdlHash
	end)

	local spawnDelay = 150
	glitchPlyrRoot:slider("Spawn Delay", {"spawndelay"}, "Note: Low spawn delays may be marked as a modded event if used on a stand user.", 50, 3000, 100, 10, function(amount)
		spawnDelay = amount
	end)

	local glitchplayer
	glitchplayer = glitchPlyrRoot:toggle_loop("Glitch Player", {"glitchplayer"}, "Blocked by menus with entity spam protections.", function()
		local rallytruck = joaat("rallytruck")
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pos = players.get_position(playerID)

		if not DOES_ENTITY_EXIST(ped) then
			toast($"{players.get_name(playerID)} is too far. :/")
			glitchvalue = false
			util.stop_thread()
		end

		util.request_model(glitchObjMdl)
		util.request_model(rallytruck)
		local obj = entities.create_object(glitchObjMdl, pos)
		local vehicle = entities.create_vehicle(rallytruck, pos, 0)
		SET_ENTITY_VISIBLE(obj, false)
		SET_ENTITY_VISIBLE(vehicle, false)
		SET_ENTITY_INVINCIBLE(obj, true)
		SET_ENTITY_COLLISION(obj, true, true)
		yield(delay)
		entities.delete(obj)
		entities.delete(vehicle)
		yield(delay)
	end)

	local glitchVehRoot = griefing:list("Glitch Vehicle")
	local glitchVehMdl = joaat("prop_ld_ferris_wheel")
	glitchVehRoot:list_select("Object", {"glitchvehobj"}, "", object_stuff, object_stuff[1][1], function(mdlHash)
		glitchVehMdl = mdlHash
	end)
	
	local glitchveh
	glitchveh = glitchVehRoot:toggle_loop("Glitch Vehicle", {"glitchvehicle"}, "Works on all menus and isn't detected by any.", function() -- credits to soul reaper for base concept
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pos = GET_ENTITY_COORDS(ped, false)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		local veh_model = players.get_vehicle_model(playerID)
		local seat_count = GET_VEHICLE_MODEL_NUMBER_OF_SEATS(veh_model)
		util.request_model(glitchVehMdl)
		if IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(playerID) then
			toast($"{players.get_name(playerID)}'s vehicle has not been cloned yet. :/")
			return
		end

		if not IS_PED_IN_ANY_VEHICLE(ped) then
			toast(lang.get_localised(PLYNVEH):gsub("{}", players.get_name(playerID)))
			glitchveh.value = false
			util.stop_thread() 
		end

		if not ARE_ANY_VEHICLE_SEATS_FREE(vehicle) then
			toast("No free seats are available. :/")
			glitchveh.value = false
			util.stop_thread() 
		end

		glitchPed = createRandomPed(pos)
		glitchObj = entities.create_object(glitchVehMdl, pos)
		local things = {glitchPed, glitchObj}
		entities.set_can_migrate(glitchPed, false)
		entities.set_can_migrate(glitchObj, false)
		SET_ENTITY_VISIBLE(glitchObj, false)
		SET_ENTITY_INVINCIBLE(glitchPed, true)
		for i = 0, seat_count -1 do
			if ARE_ANY_VEHICLE_SEATS_FREE(vehicle) then
				local emptyseat = i
				for l = 1, 25 do
					SET_PED_INTO_VEHICLE(glitchPed, vehicle, emptyseat)
					ATTACH_ENTITY_TO_ENTITY(glitchObj, glitchPed, 0, v3(), v3(), false, false, false, false, 0, true, false)
					SET_ENTITY_COLLISION(glitchObj, true, true)
					yield()
				end
			end
		end
		if glitchPed != nil then
			entities.delete(glitchPed) 
		end
		if glitchObj != nil then 
			entities.delete(glitchObj)
		end
	end, function()
		if glitchPed != nil then
			entities.delete(glitchPed) 
		end
		if glitchObj != nil then 
			entities.delete(glitchObj)
		end
	end)

	local glitchforcefield
	glitchforcefield = griefing:toggle_loop("Glitched Forcefield", {"forcefield"}, "Blocked by menus with entity spam protections.", function()
		local glitchedForcefieldMdl = joaat("p_spinning_anus_s")
		util.request_model(glitchedForcefieldMdl)

		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pos = players.get_position(playerID)
		
		if not DOES_ENTITY_EXIST(ped) then
			toast($"{players.get_name(playerID)} is too far. :/")
			glitchforcefield.value = false
			util.stop_thread()
		end

		if IS_PED_IN_ANY_VEHICLE(ped) then
			toast($"{players.get_name(playerID)} is in a vehicle. :/")
			glitchforcefield.value = false
			util.stop_thread()
		end

		local obj = entities.create_object(glitchedForcefieldMdl, pos)
		SET_ENTITY_VISIBLE(obj, false)
		SET_ENTITY_COLLISION(obj, true, true)
		yield(100)
		entities.delete(obj) 
	end)
	
	local veh_kick = griefing:list("Kick From Vehicle")
	veh_kick:action("Drag Method", {"dragkick"}, "Spawns a ped to forcefully drag them out of their vehicle.", function()
		if playerID == players.user() then 
			toast(lang.get_localised(CMDOTH))
			return
		end
		local timer = util.current_time_millis() + 2500
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)

		if IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(playerID) then
			toast($"{players.get_name(playerID)}'s vehicle has not been cloned yet. :/")
			return
		end
		
		if not IS_PED_IN_ANY_VEHICLE(ped) then
			toast(lang.get_localised(PLYNVEH):gsub("{}", players.get_name(playerID)))
			return 
		end
		
		local pos = players.get_position(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		local driver = NETWORK_GET_PLAYER_INDEX_FROM_PED(GET_PED_IN_VEHICLE_SEAT(vehicle, -1))
		local passenger = NETWORK_GET_PLAYER_INDEX_FROM_PED(GET_PED_IN_VEHICLE_SEAT(vehicle, -2))
		local seat = getSeatPedIsIn(ped)
		local ping = ROUND(NETWORK_GET_AVERAGE_PING(playerID))
		pos.z -= 50

		randomPed = createRandomPed(pos)
		entities.set_can_migrate(randomPed, false)
		SET_ENTITY_INVINCIBLE(randomPed, true)
		SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(randomPed, true)
		SET_PED_CONFIG_FLAG(randomPed, 366, true)
		while not GET_IS_TASK_ACTIVE(randomPed, 160) do
			if util.current_time_millis() > timer then
				if isDebugMode then
					toast("failed to assign CTaskEnterVehicle to ped. :/")
				else
					toast($"Failed to kick {players.get_name(playerID)} from the vehicle. :/")
				end
				entities.delete(randomPed)
				return
			end
			yield()
		end
		repeat
			if GET_IS_TASK_ACTIVE(ped, 2) and getSeatPedIsIn(randomPed) == seat then
				repeat
					yield()
				until not GET_IS_TASK_ACTIVE(ped, 2)
			end
			if util.current_time_millis() > timer and getSeatPedIsIn(randomPed) != seat then
				if ping > 80 then
					toast($"Failed to kick {players.get_name(playerID)} from the vehicle due to high ping ({ping}ms). :/")
				else
					toast($"Failed to kick {players.get_name(playerID)} from the vehicle. :/")
				end
				entities.delete(randomPed)
				timer = util.current_time_millis() + 2500
				break 
			end
			yield()
		until not IS_PED_IN_ANY_VEHICLE(ped)
		entities.delete(randomPed)
		timer = util.current_time_millis() + 2500
	end)

	veh_kick:action("Shuffle Method", {"shufflekick"}, 'Spawns a ped in the passenger seat and forces it to push them out. Works everytime unless the target is using "cant be dragged out".', function()
		if playerID == players.user() then 
			toast(lang.get_localised(CMDOTH))
			return
		end

		local timer = util.current_time_millis() + 2500
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pos = players.get_position(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		if IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(playerID) then
			toast($"{players.get_name(playerID)}'s vehicle has not been cloned yet. :/")
			return
		end

		if vehicle == 0 then
			util.toast(lang.get_localised(1067523721):gsub("{}", players.get_name(playerID)))
			return 
		end

		if GET_VEHICLE_MODEL_NUMBER_OF_SEATS(GET_ENTITY_MODEL(vehicle)) == 1 then
			util.toast("Vehicle doesn't allow for passengers. :/")
			return
		end

		if not IS_VEHICLE_SEAT_FREE(vehicle, -2) then
			util.toast("Passenger seat is currently occupied. :/")
			return
		end

		if not CAN_SHUFFLE_SEAT(vehicle, -1) then 
			util.toast("Seat can not be shuffled into. :/")
			return
		end

		local randomPed = createRandomPed(pos)
		entities.set_can_migrate(randomPed, false)
		SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(randomPed, true)
		SET_PED_INTO_VEHICLE(randomPed, vehicle, -2)
		TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(randomPed, vehicle)
		if IS_PED_IN_ANY_VEHICLE(ped) then
			repeat
				if GET_IS_TASK_ACTIVE(ped, 2) then
					timer = util.current_time_millis() + 2500
				end
				if util.current_time_millis() > timer then
					entities.delete(randomPed)
					util.toast("Ped failed to shuffle to drivers seat. :/")                
					timer = util.current_time_millis() + 2500
					break
				end
				util.yield()
			until not IS_PED_IN_ANY_VEHICLE(ped)
		end
		entities.delete(randomPed)
		SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle, playerID, true)
	end)
	
	veh_kick:action("Script Method", {"scriptkick"}, "Uses a script event to kick them from their vehicle.", function()
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		SET_VEHICLE_EXCLUSIVE_DRIVER(vehicle, players.user_ped(), 0)
	end)

	griefing:action("Hijack Vehicle", {"hijack"}, "Spawns a ped to drag them out of their vehicle, lock it, and drive away. (Note: May also be inconsistent on higher ping players)", function()
		if playerID == players.user() then 
			toast(lang.get_localised(CMDOTH))
			return
		end

		local timer = util.current_time_millis() + 2500
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pos = players.get_position(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		local driver = NETWORK_GET_PLAYER_INDEX_FROM_PED(GET_PED_IN_VEHICLE_SEAT(vehicle, -1))
		local passenger = NETWORK_GET_PLAYER_INDEX_FROM_PED(GET_PED_IN_VEHICLE_SEAT(vehicle, -2))
		local drivingStyle = DF_SwerveAroundAllCars | DF_AvoidRestrictedAreas | DF_GoOffRoadWhenAvoiding | DF_SteerAroundObjects | DF_UseShortCutLinks | DF_ChangeLanesAroundObstructions
		local ping = ROUND(NETWORK_GET_AVERAGE_PING(playerID))
		if IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(playerID) then
			toast($"{players.get_name(playerID)}'s vehicle has not been cloned yet. :/")
			return
		end

		if vehicle == 0 then
			toast(lang.get_localised(PLYNVEH):gsub("{}", players.get_name(playerID)))
			return 
		end

		pos.z -= 30
		if not IS_PED_A_PLAYER(GET_PED_IN_VEHICLE_SEAT(vehicle, -1)) then
			toast("Vehicle has already been hijacked. :D")
			return 
		end
		randomPed = createRandomPed(pos)
		SET_ENTITY_INVINCIBLE(randomPed, true)
		SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(randomPed, true)
		entities.set_can_migrate(randomPed, false)
		TASK_ENTER_VEHICLE(randomPed, vehicle, 1000, -1, 1.0, ECF_WARP_ENTRY_POINT | ECF_DONT_WAIT_FOR_VEHICLE_TO_STOP | ECF_JACK_ANYONE | ECF_WARP_PED | ECF_WARP_IF_DOOR_IS_BLOCKED, 0, false)
		while not GET_IS_TASK_ACTIVE(randomPed, 160) do
			if util.current_time_millis() > timer then
				if isDebugMode then
					toast("failed to assign CTaskEnterVehicle to ped. :/")
				else
					toast("Failed to hijack their vehicle. :/")
				end
				entities.delete(randomPed)
				return
			end
			yield()
		end
		repeat
			if GET_IS_TASK_ACTIVE(ped, 2) then
				timer = util.current_time_millis() + 2500
			end
			if util.current_time_millis() > timer and IS_PED_IN_ANY_VEHICLE(ped) then
				if ping > 80 then -- this is high enough to interfere with the hijack process
					toast($"Failed to hijack their vehicle due to high ping ({ping}ms). :/")
				else
					toast("Failed to hijack their vehicle. :/")
				end
				entities.delete(randomPed)
				timer = util.current_time_millis() + 2500
				return 
			end
			yield()
		until not IS_PED_IN_ANY_VEHICLE(ped)
		if getSeatPedIsIn(randomPed) == -1 then
			entities.request_control(vehicle, 2500)
			TASK_VEHICLE_DRIVE_WANDER(randomPed, vehicle, 9999.0, drivingStyle) 
			toast("Bippity boppity their car is now your property :D")
			if not GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle, playerID) then
				SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle, playerID, true)
			end
		end
		yield(1000)
		if not GET_IS_TASK_ACTIVE(randomPed, 151) then
			if not IS_PED_IN_ANY_VEHICLE(randomPed) then
				repeat
					if util.current_time_millis() > timer then
						if isDebugMode then
							toast("failed to assign CTaskEnterVehicle to ped. :/")
						else
							toast("Failed to hijack their vehicle. :/")
						end
						entities.delete(randomPed)
						return
					end
					SET_PED_INTO_VEHICLE(randomPed, vehicle, -1)
					yield()
				until GET_VEHICLE_PED_IS_USING(randomPed) == vehicle
				entities.request_control(randomPed, 2500)
				TASK_VEHICLE_DRIVE_WANDER(randomPed, vehicle, 9999.0, drivingStyle)
			end

		end
		yield(5000)
		if randomPed != nil and not IS_PED_IN_ANY_VEHICLE(randomPed, false) then -- 2nd check cus sometimes doesnt delete the first time
			entities.delete(randomPed)
		end
	end)

	local tp = false
	griefing:action("Takeover Vehicle", {"takeover"}, "Spawns a ped to kick them out of their seat then warps you into it. (Note: inconsistent high ping players.)", function()
		local otr = menu.ref_by_path("Online>Off The Radar")
		if playerID == players.user() then 
			toast(lang.get_localised(CMDOTH))
			return
		end

		local timer = util.current_time_millis() + 2500
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local local_pos = players.get_position(players.user())
		local pos = players.get_position(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		local cam_pos = players.get_cam_pos(playerID)
		local pedDistance = v3.distance(players.get_position(players.user()), players.get_position(playerID))
		local ping = ROUND(NETWORK_GET_AVERAGE_PING(playerID))
		if IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(playerID) then
			toast($"{players.get_name(playerID)}'s vehicle has not been cloned yet. :/")
			return
		end

		if vehicle == 0 then
			toast(lang.get_localised(PLYNVEH):gsub("{}", players.get_name(playerID)))
			return 
		end

		pos.z -= 50	
		if pedDistance > 100.0 then
			otr.value = true
			FREEZE_ENTITY_POSITION(players.user_ped(), true)
			invisibility:setState("Enabled")
			SET_ENTITY_COORDS_NO_OFFSET(players.user_ped(), cam_pos, false, false, false)
			tp = true
		end
		randomPed = createRandomPed(pos)
		entities.set_can_migrate(randomPed, false)
		SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(randomPed, true)
		TASK_ENTER_VEHICLE(randomPed, vehicle, 1000, -1, 1.0, ECF_WARP_ENTRY_POINT | ECF_DONT_WAIT_FOR_VEHICLE_TO_STOP | ECF_JACK_ANYONE | ECF_WARP_PED | ECF_WARP_IF_DOOR_IS_BLOCKED, 0, false)
		if getSeatPedIsIn(randomPed) != -1 then
			repeat
				cam_pos = players.get_cam_pos(playerID)
				SET_PED_INTO_VEHICLE(randomPed, vehicle, -1)
				if tp then
					SET_ENTITY_COLLISION(players.user_ped(), false, false)
					invisibility:setState("Enabled")
					SET_ENTITY_COORDS_NO_OFFSET(players.user_ped(), cam_pos, false, false, false)
				end
				if GET_IS_TASK_ACTIVE(ped, 2) then
					timer = util.current_time_millis() + 5000
				end
				if util.current_time_millis() > timer then
					if tp then
						FREEZE_ENTITY_POSITION(players.user_ped(), false)
						SET_ENTITY_COLLISION(players.user_ped(), true, true)
						invisibility:setState("Disabled")
						SET_ENTITY_COORDS_NO_OFFSET(players.user_ped(), local_pos, false, false, false)
						tp = false
					end
					if util.current_time_millis() > timer then
						if ping > 80 then
							toast($"Failed to takeover their vehicle due to high ping ({ping}ms). :/")
							invisibility:setState("Disabled")
						else
							toast("Failed to takeover their vehicle. :/")
							invisibility:setState("Disabled")
						end
					end
					otr.value = false
					entities.delete(randomPed)
					timer = util.current_time_millis() + 2500
					return
				end
				yield()
			until getSeatPedIsIn(ped) != -1
			entities.delete(randomPed)
		end
		timer = util.current_time_millis() + 2500
		SET_PED_INTO_VEHICLE(players.user_ped(), vehicle, -1)
		repeat
			if not IS_PED_IN_ANY_VEHICLE(ped) and getSeatPedIsIn(ped) != -1 then
				if tp then
					invisibility:setState("Enabled")
				end
				if util.current_time_millis() > timer then
					if DECOR_GET_INT(vehicle, "Player_Vehicle") != 0 then
						toast("Failed to warp into vehicle due to personal vehicle permissions. :/")
					else 
						toast("Failed to warp into player vehicle. :/")
					end
					if tp then
						SET_ENTITY_COLLISION(players.user_ped(), true, true)
						FREEZE_ENTITY_POSITION(players.user_ped(), false)
						SET_ENTITY_COORDS_NO_OFFSET(players.user_ped(), local_pos, false, false, false)
						invisibility:setState("Disabled")
						tp = false
					end
					otr.value = false
					entities.delete(randomPed)
					timer = util.current_time_millis() + 2500
					return
				end
				SET_PED_INTO_VEHICLE(players.user_ped(), vehicle, -1)
			end
			yield()
		until GET_VEHICLE_PED_IS_USING(players.user_ped()) == vehicle
		SET_ENTITY_COLLISION(players.user_ped(), true, true)
		FREEZE_ENTITY_POSITION(players.user_ped(), false)
		invisibility:setState("Disabled")
		otr.value = false
		toast("Bippity boppity their car is now your property :D")
		timer = util.current_time_millis() + 2500
	end)

	local lockon
	lockon = griefing:toggle_loop("Lock On Sound", {"lockon"}, "Note: Only works on specific vehicles such as weaponized ones.", function()
		if playerID == players.user() then 
			toast(lang.get_localised(CMDOTH))
			lockon.value = false
			return
		end

		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		if not IS_PED_IN_ANY_VEHICLE(ped) then
			toast(lang.get_localised(PLYNVEH):gsub("{}", players.get_name(playerID)))
			lockon.value = false
			return 
		end

		SET_VEHICLE_HOMING_LOCKEDONTO_STATE(vehicle, 1)
	end)
	
	griefing:action("Tow Vehicle", {"tow"}, "", function()
		local towtruckMdl = joaat("towtruck3")
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		if not IS_PED_IN_ANY_VEHICLE(ped) then
			toast(lang.get_localised(PLYNVEH):gsub("{}", players.get_name(playerID)))
			return
		end
		local pos = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(vehicle, 0.0, 7.0, 0.0)
		util.request_model(towtruckMdl)
		entities.request_control(vehicle, 2500)
		local randomPed = createRandomPed(pos)
		local towtruck = entities.create_vehicle(towtruckMdl, pos, GET_ENTITY_HEADING(vehicle))
		SET_ENTITY_INVINCIBLE(randomPed, true)
		SET_PED_INTO_VEHICLE(randomPed, towtruck, -1)
		ATTACH_VEHICLE_TO_TOW_TRUCK(towtruck, vehicle, false, 90.0, 90.0, -180.0)
		SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(randomPed, true)
		TASK_VEHICLE_DRIVE_WANDER(randomPed, towtruck, 9999.0, DF_SwerveAroundAllCars | DF_AvoidRestrictedAreas | DF_GoOffRoadWhenAvoiding | DF_SteerAroundObjects | DF_UseShortCutLinks | DF_ChangeLanesAroundObstructions) 
	end)
	
	griefing:action("Spike Strip", {"spike"}, "Spawns spike strips in front of their vehicle.", function()
		local spikeStripMdl = joaat("xs_prop_arena_spikes_02a")
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		if not IS_PED_IN_ANY_VEHICLE(ped) then
			toast(lang.get_localised(PLYNVEH):gsub("{}", players.get_name(playerID)))
			return 
		end
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		local height = GET_ENTITY_HEIGHT_ABOVE_GROUND(vehicle)
		if height > 1.0 then 
			toast("Vehicle is too high above the ground. :/")
			return
		end
		util.request_model(spikeStripMdl)
		local pos = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(vehicle, 0.0, GET_ENTITY_SPEED(vehicle)/2, -0.55)
		spikes = entities.create_object(spikeStripMdl, pos)
		SET_ENTITY_HEADING(spikes, GET_ENTITY_HEADING(vehicle) - 180)
		yield(2500)
		entities.delete(spikes)
	end)

	local boostVeh
	boostVeh = griefing:toggle_loop("Boost Vehicle", {"boost"}, "Uses Newtons laws of physics to propell their vehicle forward.", function()
		local speedUpMdl = joaat("stt_prop_track_speedup")
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		util.request_model(speedUpMdl)
		if IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(playerID) then
			toast($"{players.get_name(playerID)}'s vehicle has not been cloned yet. :/")
			return
		end

		if not IS_PED_IN_ANY_VEHICLE(ped) then
			toast(lang.get_localised(PLYNVEH):gsub("{}", players.get_name(playerID)))
			boostVeh.value = false
			return 
		end

		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		local pos = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(vehicle, 0.0, GET_ENTITY_SPEED(vehicle)/1.5, -3.0)
		if boostpad == nil or not DOES_ENTITY_EXIST(boostpad) then
			boostpad = entities.create_object(speedUpMdl, pos)
			SET_OBJECT_SPEED_BOOST_AMOUNT(boostpad, 100)
			entities.set_can_migrate(boostpad, false)
		end
		yield(500)
		SET_ENTITY_COORDS_NO_OFFSET(boostpad, pos, false, false, false)
		SET_ENTITY_HEADING(boostpad, GET_ENTITY_HEADING(vehicle) - 90)
	end, function()
		if boostpad != nil then
			entities.delete(boostpad)
		end
	end)
	
	local slowdownVeh
	slowdownVeh = griefing:toggle_loop("Slow Down Vehicle", {"slowdown"}, "Bypasses Newtons laws of physics to halt their vehicle to a snails pace.", function()
		local slowDownMdl = joaat("stt_prop_track_slowdown")
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		util.request_model(slowDownMdl)

		if IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(playerID) then
			toast($"{players.get_name(playerID)}'s vehicle has not been cloned yet. :/")
			return
		end

		if not IS_PED_IN_ANY_VEHICLE(ped) then
			toast(lang.get_localised(PLYNVEH):gsub("{}", players.get_name(playerID)))
			slowdownVeh.value = false
			return 
		end

		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		local pos = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(vehicle, 0.0, GET_ENTITY_SPEED(vehicle)/1.5, -3.0)
		if brakepad == nil or not DOES_ENTITY_EXIST(brakepad) then
			brakepad = entities.create_object(slowDownMdl, pos)
			entities.set_can_migrate(brakepad, false)
		end
		yield(500)
		SET_ENTITY_COORDS_NO_OFFSET(brakepad, pos, false, false, false)
		SET_ENTITY_HEADING(brakepad, GET_ENTITY_HEADING(vehicle) - 90)
	end, function()
		if brakepad != nil then
			entities.delete(brakepad)
		end
	end)

	griefing:action("Hospitalize", {"hospitalize"}, "", function()
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local ping = ROUND(NETWORK_GET_AVERAGE_PING(playerID))
		local timer = (ping > 300) ? (util.current_time_millis() + 5000) : (util.current_time_millis() + 3000)
		local pPed =  entities.handle_to_pointer(ped)
		local pedPtr = entities.handle_to_pointer(players.user_ped())
		if IS_PLAYER_DEAD(playerID) then return end
		if IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(playerID)then
            toast($"{players.get_name(playerID)}'s ped has not been cloned yet. :/")
            return
        end
		setBit(memory.script_global(GlobalplayerBD + 1 + (players.user() * 463) + 424), 0)
		yield(1000)
		repeat
			util.call_foreign_function(CWeaponDamageEventTrigger, pedPtr, pPed, pPed + 0x90, 0, 1, joaat("weapon_pistol"), 500.0, 0, 0, DF_IsAccurate | DF_IgnorePedFlags | DF_SuppressImpactAudio | DF_IgnoreRemoteDistCheck, 0, 0, 0, 0, 0, 0, 0, 0.0)
			if util.current_time_millis() > timer then
				toast($"Failed to kill {players.get_name(playerID)}. :/")
				clearBit(memory.script_global(GlobalplayerBD + 1 + (players.user() * 463) + 424), 0)
				timer = util.current_time_millis() + 3000
				return
			end
			yield()
		until IS_PED_DEAD_OR_DYING(ped)
		yield(1000)
		timer = util.current_time_millis() + 3000
		clearBit(memory.script_global(GlobalplayerBD + 1 + (players.user() * 463) + 424), 0)
    end)

	local isOrbActive = false
	griefing:action("Orbital Strike Player", {"orb"}, "", function()
		local timer = util.current_time_millis() + 3000
		if playerID == players.user() then 
			toast(lang.get_localised(CMDOTH))
			return
		end
		if isOrbActive then 
			toast(lang.get_localised(TOOFAST))
			return 
		end
		if IS_PLAYER_DEAD(playerID) or not isNetPlayerOk(playerID) then 
			return 
		end
        local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		isOrbActive = true
        setBit(memory.script_global(GlobalplayerBD + 1 + (players.user() * 463) + 424), 0)
		yield(1000) -- yielding a second because its a bit iffy on high(ish) ping players (150ms+)
		local pos = players.get_position(playerID)
		ADD_OWNED_EXPLOSION(players.user_ped(), pos, 59, 1.0, true, false, 1.0)
		USE_PARTICLE_FX_ASSET("scr_xm_orbital")
		START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_xm_orbital_blast", pos, v3(), 1.0, false, false, false, true)
		PLAY_SOUND_FROM_COORD(0, "DLC_XM_Explosions_Orbital_Cannon", pos, 0, true, 0, false) -- hardcoding sound id because GET_SOUND_ID doesnt work sometimes
		yield(1000)
		clearBit(memory.script_global(GlobalplayerBD + 1 + (players.user() * 463) + 424), 0)
		repeat
			if util.current_time_millis() > timer and not IS_PED_DEAD_OR_DYING(ped) then
				toast($"Failed to orbital strike {players.get_name(playerID)}. :/")
				timer = util.current_time_millis() + 3000
				return
			end
			yield()
		until not IS_PED_DEAD_OR_DYING(ped)
		STOP_SOUND(0)
		isOrbActive = false
		timer = util.current_time_millis() + 3000
    end)

	griefing:toggle_loop("Launch Player", {"launch"}, "Works on most menus.", function()
		local muleMdl = joaat("mule5")
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pos = players.get_position(playerID)
		util.request_model(muleMdl)
					
		veh = entities.create_vehicle(muleMdl, GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(ped, 0.0, 1.0, -3.0), GET_ENTITY_HEADING(ped))
		entities.set_can_migrate(veh, false)
		SET_ENTITY_VISIBLE(veh, false)
		yield(500)
		APPLY_FORCE_TO_ENTITY(veh, 1, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0, 0, 1, 1, 1, 0, 1)
		yield(2500)
		entities.delete(veh)
		repeat
			yield()
		until GET_ENTITY_SPEED(ped) < 30.0
	end, function()
		if veh != 0 and DOES_ENTITY_EXIST(veh) then 
			entities.delete(veh)
		end
	end)
	
	local vent = {}
	griefing:toggle_loop("Stumble Player", {"stumble"}, "", function()
		local mdl = joaat("prop_roofvent_06a")
		local pos = players.get_position(playerID)
		pos.z -= 2.4
		util.request_model(mdl)
		local temp_v3 = v3.new(0, 0, 0)
		local middleVent = entities.create_object(mdl, v3(pos.x, pos.y, pos.z))
		SET_ENTITY_VISIBLE(middleVent, false)
		for i = 1, 4 do
			local angle = (i / 4) * 360
			temp_v3.z = angle
			local obj_pos = temp_v3:toDir()
			obj_pos:mul(1.25)
			obj_pos:add(pos)
			vent[i] = entities.create_object(mdl, obj_pos)
			SET_ENTITY_VISIBLE(vent[i], false)
		end
		yield(500)
		entities.delete(middleVent)
		for vent as obj do
			entities.delete(obj)
		end
	end)

	griefing:action("Kill Interior Player", {"interiorkill"}, "Note: this does not work for some interiors such as apartments.", function()
		if memory.read_int(getPlayerProperty(playerID)) != -1 then 
			toast("This won't work for apartments. :/")
			return
		end 
		if isPlayerInInterior(playerID) then
			local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
			local pPed =  entities.handle_to_pointer(ped)
			local pedPtr = entities.handle_to_pointer(players.user_ped())
			util.call_foreign_function(CWeaponDamageEventTrigger, pedPtr, pPed, pPed + 0x90, 0, 1, joaat("weapon_snowball"), 500.0, 0, 0, DF_IsAccurate | DF_IgnorePedFlags | DF_SuppressImpactAudio | DF_IgnoreRemoteDistCheck, 0, 0, 0, 0, 0, 0, 0, 0.0)
		end
	end)

	griefing:toggle_loop("Smokescreen", {"smoke"}, "Fills up their screen with black smoke.", function() 
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		REQUEST_NAMED_PTFX_ASSET("scr_as_trans")
		USE_PARTICLE_FX_ASSET("scr_as_trans")
		if ptfx == nil or not DOES_PARTICLE_FX_LOOPED_EXIST(ptfx) then
			ptfx = START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY("scr_as_trans_smoke", ped, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, false, false, false, 0, 0, 0, 255)
		end
	end, function()
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		REMOVE_PARTICLE_FX(ptfx)
		REMOVE_NAMED_PTFX_ASSET("scr_as_trans")
	end)

	local gravity = griefing:list("Gravitate Player", {}, "Works on all menus but can be detected. Also doesn't work on players with godmode.")
	local gravitateForce = 1.00
	menu.slider_float(gravity, "Gravitational Force", {"force"}, "", 0, 100, 100, 10, function(value)
		gravitateForce = value / 100
	end)
 
	gravity:toggle_loop("Gravitate Player", {"gravitate"}, "", function()
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)

		if isPlayerGodmode(playerID) and (not NETWORK_IS_PLAYER_FADING(playerID) and IS_ENTITY_VISIBLE(ped)) and isNetPlayerOk(playerID) and not isPlayerInCutscene(playerID) and not players.is_using_rc_vehicle(playerID) then
			toast($"{players.get_name(playerID)} is in godmode. :/")
			gravitate.value = false
			util.stop_thread()
		end
		
		ADD_EXPLOSION(players.get_position(playerID), 29, gravitateForce, false, true, 0.0, true)
		yield(1000)
	end)
	
	griefing:toggle_loop("Confused Homing Rockets", {}, "Will spawn a random flare under the map to make the rockets go off in a random direction.", function()
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pos = players.get_position(playerID)
		local groundPos = players.get_position(playerID)

		local ground
		ground, groundPos.z = util.get_ground_z(groundPos.x, groundPos.y)
		if not ground then return end

		groundPos.x += math.random(-50, 50)
		groundPos.y += math.random(-50, 50)
		groundPos.z -= 10

		if IS_PED_SHOOTING(ped) and IS_PED_ARMED(ped, 2) then
			SHOOT_SINGLE_BULLET_BETWEEN_COORDS(groundPos, pos, 0, true, joaat("weapon_flaregun"), players.user_ped(), true, false, 0.0)
		end
	end)
	
    griefing:toggle_loop("Suicidal Homing Rockets", {}, "Will make their homing rockets turn around and target themselves.", function()
        local things = {-0.1, 0.1}
        local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
        local pos = players.get_position(playerID)
        local pos1 = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(ped, things[math.random(#things)], -15.0, -2.0)
        local pos2 = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(ped, 0.0, 0.0, 0.0)
        if IS_PED_SHOOTING(ped) and IS_PED_ARMED(ped, 2) then
            SHOOT_SINGLE_BULLET_BETWEEN_COORDS(pos1, pos2, 0, true, util.joaat("weapon_flaregun"), players.user_ped(), true, false, 0.0)
            yield(2500)
            CLEAR_AREA_OF_PROJECTILES(pos, 25.0, 0)
        end
    end)

	griefing:textslider("Bad Phone Invite", {}, "If sent while not in the selected interior, the player will get stuck in an infinite loading screen if they accept the invite.", {"Yacht", "Office", "Clubhouse", "Office Garage", "Custom Auto Shop", "Apartment"}, function(index)
		util.trigger_script_event(1 << playerID, {996099702, playerID, index})
	end)

	griefing:toggle_loop("Black Screen", {}, "", function()
		local handle = NETWORK_HASH_FROM_PLAYER_HANDLE(playerID)
		util.trigger_script_event(1 << playerID, {-1604421397, players.user(), 1, 4, handle, handle, handle, handle, 1, 1})
		yield(10000)
	end)
	 
	griefing:toggle_loop("Cutscene Loop", {}, "", function()
		local handle = NETWORK_HASH_FROM_PLAYER_HANDLE(playerID)
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		util.trigger_script_event(1 << playerID, {-1604421397, players.user(), math.random(0, 114), 4, handle, handle, handle, handle, 1, 1})
		repeat
			yield()
		until IS_ENTITY_VISIBLE(ped)
	end)

	griefing:action("Send To Online Intro", {"intro"}, "Sends player to the GTA Online intro.", function()
		local int = memory.read_int(memory.script_global(GlobalplayerBD_FM_3 + 1 + (playerID * 609) + 511)) -- Global_1886967[PLAYER::PLAYER_ID() /*609*/].f_511
		util.trigger_script_event(1 << playerID, {-366707054, players.user(), 20, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, int})
		util.trigger_script_event(1 << playerID, {1757622014, players.user(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})
	 end)
	
	local jobs = griefing:list("Send To Activity")
	local activities = {
		[211] = "Darts",
		[212] = "Golf",
		[215] = "Pilot School"
	}
	
	for id, activity in activities do
		jobs:action(activity, {activity}, "Forces the player into an activity.", function()
			local int = memory.read_int(memory.script_global(GlobalplayerBD_FM_3 + 1 + (playerID * 609) + 511))
			util.trigger_script_event(1 << playerID, {-366707054, players.user(), id, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, int})
			util.trigger_script_event(1 << playerID, {1757622014, players.user(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})
		end)
	end

	local sendToArcade = griefing:list("Send To Arcade Game")
	local arcadeGames = {
		[229] = "Race And Chase",
		[230] = "Badlands Revenge II",
		[231] = "The Wizards Ruin",
		[235] = "Space Monkey",
		[236] = "Qub3d",
		[237] = "Camhedz",
	}
	
	for id, gameName in arcadeGames do
		sendToArcade:action(gameName, {}, "", function()
			local int = memory.read_int(memory.script_global(GlobalplayerBD_FM_3 + 1 + (playerID * 609) + 511))
			util.trigger_script_event(1 << playerID, {-366707054, players.user(), id, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, int})
			util.trigger_script_event(1 << playerID, {1757622014, players.user(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0})
		end)
	end
	griefing:toggle_loop("Lock Out Of Vehicles", {"vehiclelock"}, "", function()
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_TRYING_TO_ENTER(ped)
		if not GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle, playerID) then
			SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(vehicle, playerID, true)
		end
	end)

	local disableAcceleration
	disableAcceleration = griefing:toggle_loop("Disable Vehicle Acceleration", {}, "", function()
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		if not IS_PED_IN_ANY_VEHICLE(ped) then
			toast(lang.get_localised(PLYNVEH):gsub("{}", players.get_name(playerID)))
			disableAcceleration.value = false
			return 
		end
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		local top_speed = GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED(vehicle)
		entities.request_control(vehicle, 2500)
		SET_VEHICLE_MAX_SPEED(vehicle, 0.1)
	end)

	griefing:action("Flip Vehicle Upside Down", {"flip"}, "", function()
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pos = players.get_position(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		local rot = GET_ENTITY_ROTATION(vehicle, 2)
		rot.x = 180

		if not IS_PED_IN_ANY_VEHICLE(ped) then
			toast(lang.get_localised(PLYNVEH):gsub("{}", players.get_name(playerID)))
			return 
		end
		entities.request_control(vehicle, 2500)
		SET_ENTITY_ROTATION(vehicle, rot, 2, false)
	end)

	griefing:toggle_loop("Stun Player", {"stun"}, "", function()
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pPed =  entities.handle_to_pointer(ped)
		local pedPtr = entities.handle_to_pointer(players.user_ped())
		util.call_foreign_function(CWeaponDamageEventTrigger, pedPtr, pPed, pPed + 0x90, 0, 1, joaat("weapon_stungun_mp"), 0.0, 0, 0, DF_IsAccurate | DF_IgnoreRemoteDistCheck, 0, 0, 0, 0, 0, 0, 0, 0.0)
	end)

	griefing:toggle("Patty Wagon", {"pattywagon"}, "", function(toggled)
		local hamburgerMdl = joaat("xs_prop_hamburgher_wl")
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		if not IS_PED_IN_ANY_VEHICLE(ped) then
			toast(lang.get_localised(PLYNVEH):gsub("{}", players.get_name(playerID)))
			glitchveh.value = false
			util.stop_thread() 
		end
		local pos = players.get_position(playerID)
		pos.z -= 0.50
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		util.request_model(hamburgerMdl)
		if toggled then
			if IS_PED_IN_ANY_VEHICLE(ped) then
				hamburger = entities.create_object(hamburgerMdl, pos)
				SET_ENTITY_COLLISION(hamburger, false, true)
				entities.set_can_migrate(hamburger, false)
				ATTACH_ENTITY_TO_ENTITY(hamburger, vehicle, 0, 0.0, 0.0, -0.50, v3(), false, false, true, false, 0, false, false)
			end
		else
			if hamburger == nil or not DOES_ENTITY_EXIST(hamburger) then
				toast("Hamburger does not exist. :/")
				return
			end
			entities.delete(hamburger)
		end
	end)
	
	griefing:action("Hamburger", {"hamburger"}, "Whopper, Whopper, Whopper, Whopper!", function()
		local hamburgerMdl = joaat("xs_prop_hamburgher_wl")
		local pos = players.get_position(playerID)
		pos.z -= 0.50
		util.request_model(hamburgerMdl)
		local hamburger = entities.create_object(hamburgerMdl, pos)
		entities.set_can_migrate(hamburger, false)
		yield(60000)
		entities.delete(hamburger)
	end)

	antigodmode:toggle_loop("Remove Player Godmode", {}, lang.get_localised(-748077967), function()
		util.trigger_script_event(1 << playerID, {800157557, players.user(), 225624744, math.random(0, 9999)})
	end)

	antigodmode:action("Kill", {"killgod", "modkill"}, lang.get_localised(-748077967), function()
		if IS_PLAYER_DEAD(playerID) then return end
		if IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(playerID)then
            toast($"{players.get_name(playerID)}'s ped has not been cloned yet. :/")
            return
        end

        if not isPlayerGodmode(playerID) then 
            toast($"{players.get_name(playerID)} is not in godmode or is using anti-detections. :/")
            return 
        end
		godKill(playerID)
    end)

	local isGodmodeRemovable = {}
	antigodmode:action("Orbital Strike", {"orbgod"}, lang.get_localised(-748077967), function()
		local timer = util.current_time_millis() + 3500
        local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		if IS_PLAYER_DEAD(playerID) then return end
		if IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(playerID)then
            toast($"{players.get_name(playerID)}'s ped has not been cloned yet. :/")
            return
        end

        if not isPlayerGodmode(playerID) then 
            toast($"{players.get_name(playerID)} is not in godmode or is using anti-detections. :/")
            return 
        end
		
		repeat
			toast("Removing Godmode...")
			if util.current_time_millis() > timer then
				toast($"Failed to remove {players.get_name(playerID)}'s godmode. :/")
				return
			end
			util.trigger_script_event(1 << playerID, {800157557, players.user(), 225624744, math.random(0, 9999)})
			yield()
		until not players.is_godmode(playerID)
		isGodmodeRemovable[playerID] = true

		if isGodmodeRemovable[playerID] then
			toast("Orbital Striking Player...")
			if isPlayerInAnyVehicle(playerID) and entities.is_invulnerable(vehicle) then
				entities.request_control(vehicle, 2500)
				SET_ENTITY_CAN_BE_DAMAGED(vehicle, true)
				SET_ENTITY_INVINCIBLE(vehicle, false)
				SET_ENTITY_PROOFS(vehicle, false, false, false, false, false, false, false, false)
			end

			setBit(memory.script_global(GlobalplayerBD + 1 + (players.user() * 463) + 424), 0)
			yield(500) -- yielding so their game realizes I'm using the orb
			local pos = players.get_position(playerID)
			ADD_OWNED_EXPLOSION(players.user_ped(), pos, 59, 1.0, true, false, 1.0)
			USE_PARTICLE_FX_ASSET("scr_xm_orbital")
			START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_xm_orbital_blast", pos, v3(), 1.0, false, false, false, true)
			PLAY_SOUND_FROM_COORD(0, "DLC_XM_Explosions_Orbital_Cannon", pos, 0, true, 0, false) -- hardcoding sound id because GET_SOUND_ID doesnt work sometimes
			godKill(playerID)
			yield(1000) -- yielding here isnt needed but it gives yourself the notification that you orbed them
			clearBit(memory.script_global(GlobalplayerBD + 1 + (players.user() * 463) + 424), 0)
			yield(3000)
			STOP_SOUND(0)
			isGodmodeRemovable[playerID] = false
		end
    end)

	antigodmode:action("Hospitalize", {"hospitalizegod"}, $"Fakes an orbital strike and teleports them to the hospital. {lang.get_localised(-748077967)}", function()
        local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		if IS_PLAYER_DEAD(playerID) then return end

        if not isPlayerGodmode(playerID) then 
            toast($"{players.get_name(playerID)} is not in godmode or is using anti-detections. :/")
            return 
        end
        
		setBit(memory.script_global(GlobalplayerBD + 1 + (players.user() * 463) + 424), 0)
		godKill(playerID)
		clearBit(memory.script_global(GlobalplayerBD + 1 + (players.user() * 463) + 424), 0)
    end)

	antigodmode:action("Squish", {"squish"}, "Will squish the player and remove their godmode causing them to die. Works on some popular menus but mainly bad menus. (Note: Will not work if the target is using no ragdoll).", function()
		local khanjali = joaat("khanjali")
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local heading =  GET_ENTITY_HEADING(ped)
		local pos = players.get_position(playerID)
		util.request_model(khanjali)
		distance = IS_PED_STILL(ped) ? 0.0 : 2.5

		local vehicle1 = entities.create_vehicle(khanjali, GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(ped, 0.0, distance, 2.8), heading)
		local vehicle2 = entities.create_vehicle(khanjali, pos, 0)
		local vehicle3 = entities.create_vehicle(khanjali, pos, 0)
		local vehicle4 = entities.create_vehicle(khanjali, pos, 0)
		local spawned_vehs = {vehicle1, vehicle2, vehicle3, vehicle4}
		for spawned_vehs as vehicle do
			entities.set_can_migrate(vehicle, false)
			SET_ENTITY_VISIBLE(vehicle, false)
		end
		ATTACH_ENTITY_TO_ENTITY(vehicle2, vehicle1, 0.0, 0.0, 3.0, v3(), -180.0, 0, false, true, false, 0, true, false)
		ATTACH_ENTITY_TO_ENTITY(vehicle3, vehicle1, 0.0, 3.0, 3.0, v3(), -180.0, 0, false, true, false, 0, true, false)
		ATTACH_ENTITY_TO_ENTITY(vehicle4, vehicle1, 0.0, 3.0, 0.0, v3(), 0.0, 0, false, true, false, 0, true, false)
		yield(6000)
		for spawned_vehs as vehicle do
			entities.delete(vehicle)
		end
	end) 

	antigodmode:action("Death Barrier Kill", {"barrierkill"}, "Note: Will only work if the target is not using disable death barriers. May also be inconsistent on higher ping players.", function()
		local windmill = joaat("prop_windmill_01")
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pos = players.get_position(playerID)                            
		util.request_model(windmill)
		for i = 1, 5 do
			if IS_PED_WALKING(ped) then
				spawnPos = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(ped, 0.0, 0.5, 0.0)
			elseif not IS_PED_WALKING(ped) then
				spawnPos = GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(ped, 0.0, 1.3, 0.0)
			else
				spawnPos = players.get_position(playerID)
			end
			local obj = entities.create_object(windmill, spawnPos)
			SET_ENTITY_VISIBLE(obj, false)
			SET_ENTITY_INVINCIBLE(obj, true)
			SET_ENTITY_COLLISION(obj, true, true)
			yield(150)
			entities.delete(obj)
		end
	end)

	antigodmode:action("Teleport To Death Barrier", {}, "", function()
		players.teleport_3d(playerID, -1141.5363, -2164.0615, 26.823051)
	end)

	antigodmode:toggle_loop("Remove Vehicle Godmode", {}, lang.get_localised(-748077967), function()
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		if not IS_PED_IN_ANY_VEHICLE(ped) then
			toast(lang.get_localised(PLYNVEH):gsub("{}", players.get_name(playerID)))
			glitchveh.value = false
			util.stop_thread() 
		end
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		entities.request_control(vehicle, 2500)
		if IS_PED_IN_ANY_VEHICLE(ped) and not IS_PLAYER_DEAD(ped) then
			SET_ENTITY_CAN_BE_DAMAGED(vehicle, true)
			SET_ENTITY_INVINCIBLE(vehicle, false)
			SET_ENTITY_PROOFS(vehicle, false, false, false, false, false, false, false, false)
		end
	end)

	local missionWarp = tpPlayer:list("Freemode Mission Warp", {}, lang.get_localised(-748077967))
	for missionType, warpName in freemodeMissionWarps do
		missionWarp:action(warpName, {}, "", function()
			util.trigger_script_event(1 << playerID, {1450115979, players.user(), missionType, -1})
		end)
	end

	local interiorTP = tpPlayer:list("Interior Teleports", {}, lang.get_localised(-748077967))
	for id, interior in interiorTpList do
		interiorTP:action(interior, {}, "", function()
			util.trigger_script_event(1 << playerID, {-1638522928, players.user(), id, 1, 0, 1, 1130429716, -1001012850, 1106067788, 0, 0, 1, 2123789977, 1, -1})
		end)
	end

	local missionEndTP = tpPlayer:list("Mission End Teleports", {}, lang.get_localised(-748077967))
	for id, location in missionEndTeleports do
		missionEndTP:action(location, {}, "", function()
			local handle = NETWORK_HASH_FROM_PLAYER_HANDLE(playerID)
			util.trigger_script_event(1 << playerID, {-1604421397, players.user(), id, 4, handle, 0, 0, 0, 1, 1})
		end)
	end

	tpPlayer:action("Casino Cutscene", {}, "", function()
		triggerDistanceBasedTeleport(playerID, {-1951335381, 0, 0})
	end)
 
	tpPlayer:action("Vespucci Beach", {}, "", function()
		triggerDistanceBasedTeleport(playerID, {1669592503, players.user(), 0, 0, 4, 0})
	end)
	
	tpPlayer:action("Cayo Perico", {}, "", function()
		triggerDistanceBasedTeleport(playerID, {1669592503, players.user(), 0, 0, 3, 1})
	end)
	
	tpPlayer:action("Cayo Perico Scope Out Cutscene", {}, "", function()
		triggerDistanceBasedTeleport(playerID, {1669592503, players.user(), 0, 0, 5, 1})
	end)
	
	local aimbor
	aimbor = miscPlayer:toggle_loop("Legit Silent Aimbot", {"aimbot"}, "Toggles an aimbot that expands the players hitbox. (Note: This gives you aimbot, not them.)", function()
		if playerID == players.user() then 
			toast(lang.get_localised(CMDOTH))
			aimbor.value = false
			return
		end

		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local pPed =  entities.handle_to_pointer(ped)
		local pedPtr = entities.handle_to_pointer(players.user_ped())
		local wpn = GET_SELECTED_PED_WEAPON(players.user_ped())
		local dmg = GET_WEAPON_DAMAGE(wpn, 0)
		local bones = {31086, 24816, 40269, 45509, 0, 51826, 58271}
		if IS_PLAYER_FREE_AIMING_AT_ENTITY(players.user(), ped) and IS_PED_SHOOTING(players.user_ped()) and not IS_ENTITY_A_GHOST(ped) then
			boneIndex = bones[math.random(#bones)]
			local boneCoords = GET_PED_BONE_COORDS(ped, boneIndex, 0.0, 0.0, 0.0)
			util.call_foreign_function(CWeaponDamageEventTrigger, pedPtr, pPed, boneCoords, 0, 1, wpn, dmg, 0, 0, DF_IsAccurate | DF_AllowHeadShot | DF_IgnoreRemoteDistCheck, 0, 0, 0, 0, 0, 0, 0, 0.0)
		end
	end)

	local triggerbor
	triggerbor = miscPlayer:toggle_loop("Unfair Triggerbot", {"triggerbot"}, "Toggles an unfair triggerbot on that player. (Note: This gives you triggerbot, not them.)", function() -- this is not using CWeaponDamageEventTrigger because we want it to also miss every now and then
		if playerID == players.user() then 
			toast(lang.get_localised(CMDOTH))
			triggerbor.value = false
		end
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local wpn = GET_SELECTED_PED_WEAPON(players.user_ped())
		local dmg = ROUND(GET_WEAPON_DAMAGE(wpn, 0))
		local shotDelay = GET_WEAPON_TIME_BETWEEN_SHOTS(wpn)
		local wpnEnt = GET_CURRENT_PED_WEAPON_ENTITY_INDEX(players.user_ped(), false)
		local wpnCoords = GET_ENTITY_BONE_POSTION(wpnEnt, GET_ENTITY_BONE_INDEX_BY_NAME(wpnEnt, "gun_muzzle"))
		local bones = {31086, 24816, 40269, 45509, 0, 51826, 58271}
		if GET_ENTITY_ALPHA(ped) < 255 then return end
		if IS_PLAYER_FREE_AIMING_AT_ENTITY(players.user(), ped) and not IS_PED_RELOADING(players.user_ped()) then
			boneIndex = bones[math.random(#bones)]
			local pos = GET_PED_BONE_COORDS(ped, boneIndex, 0.0, 0.0, 0.0)
			SHOOT_SINGLE_BULLET_BETWEEN_COORDS(wpnCoords, pos, dmg, true, wpn, players.user_ped(), true, false, 10000.0)
			SET_CONTROL_VALUE_NEXT_FRAME(0, 24, 1.0) -- shooting manually after so it has the effect of you shooting to seem more legit despite there being nothing legit about this
			yield(shotDelay * 1000)
		end
	end)

	local vehAimbor
	vehAimbor = miscPlayer:toggle_loop("Vehicle Rocket Aimbot", {"vehicleaimbot"}, "Allows you to aimbot the specified player with your vehicles homing rockets.", function()
		if playerID == players.user() then 
			toast(lang.get_localised(CMDOTH))
			vehAimbor.value = false
			return
		end
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		if not IS_PLAYER_DEAD(ped) and IS_CONTROL_PRESSED(0, 70) and GET_VEHICLE_HOMING_LOCKON_STATE(entities.get_user_vehicle_as_handle()) == 0 then
			SET_VEHICLE_SHOOT_AT_TARGET(players.user_ped(), ped, players.get_position(playerID))
		end
	end)

	local miscTutorialSession
	miscTutorialSession = miscPlayer:toggle_loop("Enter Tutorial Session", {"entertutorialsession"}, "Enters the players tutorial session if one is active.", function()
		if playerID == players.user() then 
			toast(lang.get_localised(CMDOTH))
			miscTutorialSession.value = false
			return
		end

		if getTeamID(playerID) == nil or getInstanceID(playerID) == nil then 
			NETWORK_END_TUTORIAL_SESSION()
			toast($"{players.get_name(playerID)} is not in any tutorial session. :/")
			miscTutorialSession.value = false
			return 
		end
		
		if not NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION(players.user(), playerID) then
			NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION(getTeamID(playerID), getInstanceID(playerID))
			repeat
				yield()
			until getTeamID(playerID) == nil or getInstanceID(playerID) == nil
		end
		
	end, function()
		if NETWORK_IS_IN_TUTORIAL_SESSION() then
			NETWORK_END_TUTORIAL_SESSION()
		end
	end)

	local ghostPlayer
	ghostPlayer = miscPlayer:toggle_loop("Ghost Player", {"ghost"}, "Ghosts the selected player.", function()
		if playerID == players.user() then 
			toast(lang.get_localised(CMDOTH))
			ghostPlayer.value = false
			return
		end
		if not players.exists(playerID) then
			ghostPlayer.value = false
			return
		end
		SET_REMOTE_PLAYER_AS_GHOST(playerID, true)
	end, function()
		SET_REMOTE_PLAYER_AS_GHOST(playerID, false)
	end)

	miscPlayer:toggle_loop("Show Aim Lines", {"aimlines"}, "", function()
		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local weapon_ent = GET_CURRENT_PED_WEAPON_ENTITY_INDEX(ped, false)
		local weapon_coords = GET_ENTITY_BONE_POSTION(weapon_ent, GET_ENTITY_BONE_INDEX_BY_NAME(weapon_ent, "gun_muzzle"))
		local inst = v3.new()
		v3.set(inst, players.get_cam_rot(playerID))
		local tmp = v3.toDir(inst)
		v3.set(inst, v3.get(tmp))
		v3.mul(inst, 1000)
		v3.set(tmp, players.get_cam_pos(playerID))
		v3.add(inst, tmp)
		if IS_PLAYER_FREE_AIMING(playerID) then
			DRAW_LINE(weapon_coords, inst, 255, 255, 255, 255)
		end
	end)

	local autoVehTP
	autoVehTP = miscPlayer:toggle_loop("Auto Teleport To Vehicle", {"autovehtp"}, "Automatically teleports you into the players vehicle.", function()
		if playerID == players.user() then 
			toast(lang.get_localised(CMDOTH))
			autoVehTP.value = false
			return
		end

		local ped = GET_PLAYER_PED_SCRIPT_INDEX(playerID)
		local vehicle = GET_VEHICLE_PED_IS_USING(ped)
		local veh_model = players.get_vehicle_model(playerID)
		local seat_count = GET_VEHICLE_MODEL_NUMBER_OF_SEATS(veh_model)
		if not ARE_ANY_VEHICLE_SEATS_FREE(vehicle) then return end
		if GET_VEHICLE_PED_IS_USING(players.user_ped()) != vehicle then
			for i = 0, seat_count -1 do
				local emptyseat = i
				for l = 1, 25 do
					SET_PED_INTO_VEHICLE(players.user_ped(), vehicle, emptyseat)
				end
			end
		end
	end)
end

players.add_command_hook(player)
